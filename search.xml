<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Rxjava2.0教程（二）</title>
      <link href="/2018/11/24/Rxjava2-0%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <content type="html"><![CDATA[<h1 id="Rxjava2-0教程-二"><a href="#Rxjava2-0教程-二" class="headerlink" title="Rxjava2.0教程(二)"></a>Rxjava2.0教程(二)</h1><blockquote><p>本文只作为转载，<strong>著作权归原作者(Season_zlc)所有</strong>，原文地址:<a href="https://www.jianshu.com/p/8818b98c44e2" target="_blank" rel="noopener">https://www.jianshu.com/p/8818b98c44e2</a></p></blockquote><a id="more"></a><h2 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h2><ul><li>还是之前的例子，两个水管:</li></ul><p><div align="center"><img src="https://raw.githubusercontent.com/dondurma/MygithubPic/master/Rxjava/rxjava5.png" alt="https://raw.githubusercontent.com/dondurma/MygithubPic/master/Rxjava/rxjava5.png"></div></p><ul><li>正常情况下，上游和下游是工作在同一个线程中的，也就是说上游在哪个线程发送事件，下游就在哪个线程中接收事件</li><li>如何去理解呢？以Android为例，一个Activity的所有动作默认都是在主线程中运行的，比如我们在onCreate中打出当前线程的名字:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line"> protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">     super.onCreate(savedInstanceState);</span><br><span class="line">     setContentView(R.layout.activity_second);</span><br><span class="line">     Log.d(TAG, Thread.currentThread().getName());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>打印结果:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D/TAG: main</span><br></pre></td></tr></table></figure><ul><li>回到Rxjava中，当我们在主线程中去创建一个上游的<code>Observable</code>来发送事件，则这个上游默认就在主线程发送事件</li><li>当我们在主线程中去创建一个下游<code>Observer</code>来接收事件，则这个下游默认就在主线程中接收事件，来看段代码:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_second);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 上游</span><br><span class="line">     */</span><br><span class="line">    Observable&lt;Integer&gt; observable = Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">            Log.d(TAG, &quot;Observable thread is :&quot; + Thread.currentThread().getName());</span><br><span class="line"></span><br><span class="line">            Log.d(TAG, &quot;emit 1&quot;);</span><br><span class="line"></span><br><span class="line">            e.onNext(1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 下游</span><br><span class="line">     */</span><br><span class="line">    Consumer&lt;Integer&gt; consumer = new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">            Log.d(TAG, &quot;Observer thread is :&quot; + Thread.currentThread().getName());</span><br><span class="line"></span><br><span class="line">            Log.d(TAG, &quot;onNext:&quot; + integer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    observable.subscribe(consumer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在主线程中分别创建上游和下游，然后将他们连接再一起，同时分别打印出它们所在的线程，运行结果为:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D/TAG: Observable thread is:main</span><br><span class="line">D/TAG: emit 1</span><br><span class="line">D/TAG: Observer thread is:main</span><br><span class="line">D/TAG: onNext:1</span><br></pre></td></tr></table></figure><ul><li>这就验证了刚才所说，上下游默认是在同一个线程工作</li><li>这样肯定满足不了我们的需求，我们更多想要的是这么一种情况，在子线程中做耗时的操作，然后回到主线程中来操作UI，用图片来描述就是下面这个图片</li></ul><p><div align="center"><img src="https://raw.githubusercontent.com/dondurma/MygithubPic/master/Rxjava/rxjava6.png" alt="https://raw.githubusercontent.com/dondurma/MygithubPic/master/Rxjava/rxjava6.png"></div></p><ul><li>在这个图片中，我们用黄色水管表示子线程，深蓝色水管表示主线程</li><li>要达到这个目的，我们需要先改变上游发送事件的线程，让它去子线程中发送事件，然后再改变下游的线程，让它去主线程接收事件，通过Rxjava内置的线程调度器可以很轻松的做到这一点，接下来看一段代码:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_second2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Observable&lt;Integer&gt; observable = Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">            Log.d(TAG, &quot;Observable thread is:&quot; + Thread.currentThread().getName());</span><br><span class="line">            Log.d(TAG, &quot;emit 1&quot;);</span><br><span class="line">            e.onNext(1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Consumer&lt;Integer&gt; consumer = new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">            Log.d(TAG, &quot;Observer thread is:&quot; + Thread.currentThread().getName());</span><br><span class="line">            Log.d(TAG, &quot;onNext:&quot; + integer);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    observable</span><br><span class="line">            //上游水管开启一个新的子线程</span><br><span class="line">            .subscribeOn(Schedulers.newThread())</span><br><span class="line">            //下游水管在主线程中接收</span><br><span class="line">            .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">            .subscribe(consumer);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>还是刚才的例子，只不过添加了点东西，先来看看运行的效果:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D/TAG: Observable thread is:RxNewThreadScheduler-1</span><br><span class="line">D/TAG: emit 1</span><br><span class="line">D/TAG: Observer thread is:main</span><br><span class="line">D/TAG: onNext:1</span><br></pre></td></tr></table></figure><ul><li>可以看到，上游发送事件的线程的确改变了，是在一个叫<code>RxNewThreadScheduler-1</code>的线程中发送的事件，而下游仍然在主线程中接收事件，这说明我们的目的达成了，接下来看看如何做到的</li><li>和上一段代码相比，这段代码只不过是增加了两行代码:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> //上游水管开启一个新的子线程</span><br><span class="line">.subscribeOn(Schedulers.newThread())</span><br><span class="line">    //下游水管在主线程中接收</span><br><span class="line">.observeOn(AndroidSchedulers.mainThread())</span><br></pre></td></tr></table></figure><ul><li>简单来说，<code>subscribeOn()</code>指的是上游发送事件的线程，<code>observeOn()</code>指的是下游接收事件的线程</li><li>多次指定上游的线程只有第一次指定有效，也就是说多次调用<code>subscribeOn()</code>只有第一次有效，其余的会被忽略</li><li>多次指定下游的线程是可以的，也就是说每调用一次<code>observeOn()</code>下游的线程就会切换一次</li><li>在Rxjava中，已经内置了很多线程选项供我们选择，例如有<ul><li><code>Schedulers.io()</code>代表io操作的线程，通常用于网络，读写文件等io密集型的操作</li><li><code>Schedulers.computation()</code>代表CUP计算机密集型的操作，例如需要大量计算的操作</li><li><code>Schedulers.newThread()</code>代表一个常规的新线程</li><li><code>AndroidSchedulers.mainThread()</code>代表Android的主线程</li></ul></li><li>这些内置的Scheduler已经足够我们开发的需求，因此我们应该使用内置的这些选项，在Rxjava内部使用的是线程池来维护这些线程，所以效率也比较高</li></ul><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><ul><li>对于我们Android开发人员来说，经常会将一些耗时的操作放在后台，比如网络请求或者读取文件，操作数据库等等，等到操作完之后回到主线程中去更新UI,有了上面这些基础，那么现在我们就可以轻松的去做到这样一些操作。</li></ul><blockquote><p>该网络请求例子转载自简书，原文地址: <a href="https://www.jianshu.com/p/56f15db86ed3" target="_blank" rel="noopener">https://www.jianshu.com/p/56f15db86ed3</a></p></blockquote><h3 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h3><ul><li>下面用Retrofit2.0+Rxjava2.0实现一个网络请求的例子</li><li>(一)使用前Retrofit前，先添加Gradle配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;io.reactivex.rxjava2:rxjava:2.0.7&apos;</span><br><span class="line">compile &apos;io.reactivex.rxjava2:rxandroid:2.0.1&apos;</span><br><span class="line">compile &apos;com.squareup.retrofit2:retrofit:2.2.0&apos;</span><br><span class="line">compile &apos;com.squareup.retrofit2:converter-gson:2.2.0&apos;</span><br><span class="line">compile &apos;com.squareup.retrofit2:adapter-rxjava2:2.2.0&apos;</span><br></pre></td></tr></table></figure><ul><li>api接口<a href="http://api.laifudao.com/open/xiaohua.json" target="_blank" rel="noopener">http://api.laifudao.com/open/xiaohua.json</a></li><li>(二) 获取api接口返回的json数据，用GsonFormat自动生成的一个实体类<code>MyJoke</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public class MyJoke &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private String title;</span><br><span class="line">    private String content;</span><br><span class="line">    private String poster;</span><br><span class="line">    private String url;</span><br><span class="line"></span><br><span class="line">    public String getTitle() &#123;</span><br><span class="line">        return title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setTitle(String title) &#123;</span><br><span class="line">        this.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getContent() &#123;</span><br><span class="line">        return content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setContent(String content) &#123;</span><br><span class="line">        this.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPoster() &#123;</span><br><span class="line">        return poster;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPoster(String poster) &#123;</span><br><span class="line">        this.poster = poster;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUrl() &#123;</span><br><span class="line">        return url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUrl(String url) &#123;</span><br><span class="line">        this.url = url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>(三)创建一个名为Api的接口</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface Api &#123;</span><br><span class="line"></span><br><span class="line">    @GET(&quot;xiaohua.json&quot;)</span><br><span class="line">    Observable&lt;List&lt;MyJoke&gt;&gt; getData();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里需要注意的是，与Retrofit相比不再是<code>Call&lt;List&lt;MyJoke&gt;&gt;</code>，而是使用了Rxjava的<code>Observable&lt;List&lt;MyJoke&gt;&gt; getData();</code></li><li>接下来对网络请求进行一下简单的封装<code>HttpMethods.java</code>，如下:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">public class HttpMethods &#123;</span><br><span class="line"></span><br><span class="line">    private static final String BASE_URL = &quot;http://api.laifudao.com/open/&quot;;</span><br><span class="line"></span><br><span class="line">    private static final int TIME_OUT = 4;</span><br><span class="line"></span><br><span class="line">    private Retrofit retrofit;</span><br><span class="line"></span><br><span class="line">    private Api api;</span><br><span class="line"></span><br><span class="line">    private HttpMethods() &#123;</span><br><span class="line">        /**</span><br><span class="line">         * 构造函数私有化</span><br><span class="line">         * 并在构造函数中进行retrofit的初始化</span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line">        OkHttpClient client = new OkHttpClient();</span><br><span class="line">        client.newBuilder().connectTimeout(TIME_OUT, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 由于retrofit底层是通过okhttp实现的，所以可以通过okhttp来设置一些连接参数，如超时等</span><br><span class="line">         */</span><br><span class="line">        retrofit = new Retrofit.Builder()</span><br><span class="line">                .baseUrl(BASE_URL)</span><br><span class="line">                .client(client)</span><br><span class="line">                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .build();</span><br><span class="line">        api = retrofit.create(Api.class);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static class singleInstance &#123;</span><br><span class="line">        public static final HttpMethods instance = new HttpMethods();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static HttpMethods getInstance() &#123;</span><br><span class="line">        return singleInstance.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void getJoke(Observer&lt;List&lt;MyJoke&gt;&gt; observer) &#123;</span><br><span class="line">        api.getData()</span><br><span class="line">                .subscribeOn(Schedulers.io())</span><br><span class="line">                .unsubscribeOn(Schedulers.io())</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribe(observer);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在<code>HttpMethods</code>方法中，将构造函数私有化是为了实现单例，并向外提供一个请求方法<code>getJoke</code>，该方法的参数是一个观察者，接下来看一下MainActivity文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">    private String TAG = &quot;TAG&quot;;</span><br><span class="line"></span><br><span class="line">    private List&lt;MyJoke&gt; jokes = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        getData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取网络请求</span><br><span class="line">     */</span><br><span class="line">    private void getData() &#123;</span><br><span class="line">        HttpMethods.getInstance().getJoke(new Observer&lt;List&lt;MyJoke&gt;&gt;() &#123;</span><br><span class="line">            Disposable d;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                this.d = d;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onNext(List&lt;MyJoke&gt; myJokes) &#123;</span><br><span class="line">                jokes = myJokes;</span><br><span class="line">                Log.d(TAG, jokes.size() + &quot;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onError(Throwable e) &#123;</span><br><span class="line">                //切断下游水管</span><br><span class="line">                d.dispose();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onComplete() &#123;</span><br><span class="line">                //切断下游水管</span><br><span class="line">                d.dispose();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Rxjava2.0教程（一）</title>
      <link href="/2018/11/24/Rxjava2-0%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <content type="html"><![CDATA[<h1 id="Rxjava2-0教程-一"><a href="#Rxjava2-0教程-一" class="headerlink" title="Rxjava2.0教程(一)"></a>Rxjava2.0教程(一)</h1><blockquote><p>Rxjava作为近几年Android开发炙手可热的技术，哪怕面试也会被面试官问起，作为一个菜鸟，只有在网上苦苦搜索有关Rxjava的博客，奈何千篇一律的内容中晦涩的名词对于我来说理解起来实在困难，花了时间仍然不能理解到底什么是Rxjava?,Rxjava该如何具体应用？等等，最后，功夫不负有心人，在简书上看到了一位大神写的一个系列的Rxjava2.0文章，形象生动，诙谐幽默，通俗易懂，如沐春风。看了三遍，但觉得还是应该自己写个笔记下来，巩固、防止遗忘，本文只作为转载，<strong>著作权归原作者(Season_zlc)所有</strong>，原文地址:<a href="https://www.jianshu.com/p/464fa025229e" target="_blank" rel="noopener">https://www.jianshu.com/p/464fa025229e</a></p></blockquote><a id="more"></a><h2 id="第一步，Gradle中添加依赖"><a href="#第一步，Gradle中添加依赖" class="headerlink" title="第一步，Gradle中添加依赖"></a>第一步，Gradle中添加依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;io.reactivex.rxjava2:rxjava:2.0.1&apos;</span><br><span class="line">compile &apos;io.reactivex.rxjava2:rxandroid:2.0.1&apos;</span><br></pre></td></tr></table></figure><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><div align="center"><img src="https://raw.githubusercontent.com/dondurma/MygithubPic/master/Rxjava/rxjava1.png" alt="https://raw.githubusercontent.com/dondurma/MygithubPic/master/Rxjava/rxjava1.png"></div></p><ul><li>如上图，假设有两根水管，上面一根水管为事件产生的水管，称作 <strong>上游</strong>，下面一根水管为事件接收的水管，称作 <strong>下游</strong>。</li><li>两根水管通过一定的方式连接起来，使得上游每产生一个事件，下游就能收到该事件。</li><li>这里的上游对应Rxjava中的<code>Observable</code>，下游对应Rxjava中的<code>Observer</code>，他们之间的连接就对应着<code>subscribe()</code>，因此这个关系用Rxjava表示就是:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Observable&lt;Integer&gt; observable = Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">        e.onNext(1);</span><br><span class="line">        e.onNext(2);</span><br><span class="line">        e.onNext(3);</span><br><span class="line">        e.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Observer&lt;Integer&gt; objectObserver = new Observer&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onSubscribe(Disposable d) &#123;</span><br><span class="line">        Log.d(TAG, &quot;onSubscribe&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onNext(Integer value) &#123;</span><br><span class="line">        Log.d(&quot;TAG&quot;, value + &quot;&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onError(Throwable e) &#123;</span><br><span class="line">        Log.d(TAG, &quot;onError&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onComplete() &#123;</span><br><span class="line">        Log.d(TAG, &quot;onComplete&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">observable.subscribe(objectObserver);</span><br></pre></td></tr></table></figure><ul><li>运行结果:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D/TAG: onSubscribe</span><br><span class="line">D/TAG: 1</span><br><span class="line">D/TAG: 2</span><br><span class="line">D/TAG: 3</span><br><span class="line">D/TAG: onComplete</span><br></pre></td></tr></table></figure><blockquote><p>上游向下游发送数据之前要先建立连接，也就是先调用<code>onSubscribe</code>方法，之后才开始发送数据</p></blockquote><ul><li>把这段代码连起来写就成了RxJava引以为傲的链式操作:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void subscribe(ObservableEmitter e) throws Exception &#123;</span><br><span class="line">        e.onNext(1);</span><br><span class="line">        e.onNext(2);</span><br><span class="line">        e.onNext(3);</span><br><span class="line">        e.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onSubscribe(Disposable d) &#123;</span><br><span class="line">        Log.d(TAG, &quot;onSubscribe&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onNext(Integer value) &#123;</span><br><span class="line">        Log.d(TAG, value + &quot;&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onError(Throwable e) &#123;</span><br><span class="line">        Log.d(TAG, &quot;error&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onComplete() &#123;</span><br><span class="line">        Log.d(TAG, &quot;onComplete&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>接下来解释一下其中两个陌生的名词<code>ObservableEmitter</code>和<code>Disposable</code></li><li><code>ObservableEmitter</code>:<code>Emitter</code>是发射器的意思，那么<code>ObservableEmitter</code>就是用来发出事件的，它可以发出三种类型的事件，通过调用<code>ObservableEmitter</code>的<code>onNext(T value)</code>,<code>onComplete</code>,<code>onError(Throwable error)</code>就可以分别发出<code>next</code>事件、<code>complete</code>事件和<code>error</code>事件。</li><li>但是，请注意，并不意味着可以随意乱七八糟的发射事件，需要满足一定的规则:<ul><li>上游可以发送无限个<code>onNext</code>，下游也可以接收无限个<code>onNext</code></li><li>当上游发送了一个<code>onComplete</code>后，上游<code>onComplete</code>之后的事件将会继续发送，而下游收到<code>onComplete</code>事件之后将不再继续接收事件</li><li>当上游发送了一个<code>onError</code>后，上游<code>onError</code>之后的事件将继续发送，而下游收到<code>onError</code>事件之后将不再继续接收事件</li><li>最为关键的是<code>onComplete</code>和<code>onError</code>必须唯一并且互斥，即不能发多个<code>onComplete</code>,也不能发多个<code>onError</code>,也不能先发一个<code>onComplete</code>,然后再发一个<code>onError</code>,反之亦然.</li></ul></li></ul><ul><li>规则示意如下:</li></ul><table><thead><tr><th>事件名称</th><th>示意图</th></tr></thead><tbody><tr><td>只发送onNext事件</td><td><div align="center"><img src="https://raw.githubusercontent.com/dondurma/MygithubPic/master/Rxjava/rxjava2.png" alt="https://raw.githubusercontent.com/dondurma/MygithubPic/master/Rxjava/rxjava2.png"></div></td></tr><tr><td>发送onComplete事件</td><td><div align="center"><img src="https://raw.githubusercontent.com/dondurma/MygithubPic/master/Rxjava/rxjava3.png" alt="https://raw.githubusercontent.com/dondurma/MygithubPic/master/Rxjava/rxjava3.png"></div></td></tr><tr><td>发送onError事件</td><td><div align="center"><img src="https://raw.githubusercontent.com/dondurma/MygithubPic/master/Rxjava/rxjava4.png" alt="https://raw.githubusercontent.com/dondurma/MygithubPic/master/Rxjava/rxjava4.png"></div></td></tr></tbody></table><ul><li>介绍完了<code>ObservableEmitter</code>，接下来介绍<code>Disposable</code>，这个单词的字面意思是一次性用品，用完即可丢弃的，那么在Rxjava中怎么去理解它呢？对应于上面水管的例子，我们可以把它理解成两根管道之间的一个机关，当调用它的<code>dispose()</code>方法时，它就会将两根管道切断，从而导致下游收不到事件。</li></ul><blockquote><p>注意:调用<code>dipose()</code>并不会导致上游不再继续发送事件，上游会继续发送剩余的事件</p></blockquote><ul><li>在来看个例子，我们让上游依次发送1,2,3，<code>complete</code>,4,在下游收到第二事件后，切断水管，看看运行结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">        Log.d(TAG, &quot;emit 1&quot;);</span><br><span class="line">        e.onNext(1);</span><br><span class="line"></span><br><span class="line">        Log.d(TAG, &quot;emit 2&quot;);</span><br><span class="line">        e.onNext(2);</span><br><span class="line"></span><br><span class="line">        Log.d(TAG, &quot;emit 3&quot;);</span><br><span class="line">        e.onNext(3);</span><br><span class="line"></span><br><span class="line">        Log.d(TAG, &quot;emit complete&quot;);</span><br><span class="line">        e.onComplete();</span><br><span class="line"></span><br><span class="line">        Log.d(TAG, &quot;emit 4&quot;);</span><br><span class="line">        e.onNext(4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private Disposable mDisposable;</span><br><span class="line">    private int i;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onSubscribe(Disposable d) &#123;</span><br><span class="line">        Log.d(TAG, &quot;onSubscribe&quot;);</span><br><span class="line">        mDisposable = d;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onNext(Integer value) &#123;</span><br><span class="line"></span><br><span class="line">        Log.d(TAG, &quot;onNext:&quot; + value);</span><br><span class="line">        i++;</span><br><span class="line">        if (i == 2) &#123;</span><br><span class="line">            Log.d(TAG, &quot;dispose&quot;);</span><br><span class="line">            mDisposable.dispose();</span><br><span class="line">            Log.d(TAG, &quot;isDispose&quot; + &quot;:&quot;+mDisposable.isDisposed());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onError(Throwable e) &#123;</span><br><span class="line">        Log.d(TAG, &quot;error&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onComplete() &#123;</span><br><span class="line">        Log.d(TAG, &quot;complete&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>运行结果为:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">D/TAG: onSubscribe</span><br><span class="line">D/TAG: emit 1</span><br><span class="line">D/TAG: onNext:1</span><br><span class="line">D/TAG: emit 2</span><br><span class="line">D/TAG: onNext:2</span><br><span class="line">D/TAG: dispose</span><br><span class="line">D/TAG: isDispose:true</span><br><span class="line">D/TAG: emit 3</span><br><span class="line">D/TAG: emit complete</span><br><span class="line">D/TAG: emit 4</span><br></pre></td></tr></table></figure><ul><li>从运行结果看，在收到onNext 2这个事件之后，切断了水管，但是上游仍然发送了3，<code>complete</code>,4这几个事件，而且上游并没有因为发送了<code>onComplete</code>而停止，同时可以看到下游的<code>onSubscribe()</code>方法是最先调用的</li><li><code>Disposable</code>的用处不止这些，后面讲解到了线程的调度之后，我们会发现它的重要性，随着后续继续深入的讲解，我们会在更多的地方发现它的身影</li><li>另外<code>subscribe()</code>有多个重载的方法:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public final Disposable subscribe() &#123;&#125; </span><br><span class="line">public final Disposable subscribe(Consumer&lt;? super T&gt; onNext) &#123;&#125; </span><br><span class="line">public final Disposable subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError) &#123;&#125; </span><br><span class="line">public final Disposable subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError, Action onComplete) &#123;&#125; </span><br><span class="line">public final Disposable subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError, Action onComplete, Consumer&lt;? super Disposable&gt; onSubscribe) &#123;&#125; </span><br><span class="line">public final void subscribe(Observer&lt;? super T&gt; observer) &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>最后一个带<code>Observer</code>参数的我们已经使用过了，这里对其他几个方法进行说明:<ul><li>不带任何参数的<code>subscribe()</code>表示下游不关心任何事件，你上游尽管发你的数据。</li><li>带有一个<code>Consumer</code>参数的方法表示下游只关心onNext事件，其他的事件我假装没看见，因此我们如果只需要onNext事件可以这么写:</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">        Log.d(TAG, &quot;emit 1&quot;);</span><br><span class="line">        e.onNext(1);</span><br><span class="line">        Log.d(TAG, &quot;emit 2&quot;);</span><br><span class="line">        e.onNext(2);</span><br><span class="line">        Log.d(TAG, &quot;emit 3&quot;);</span><br><span class="line">        Log.d(TAG, &quot;emit complete&quot;);</span><br><span class="line"></span><br><span class="line">        e.onComplete();</span><br><span class="line">        Log.d(TAG, &quot;emit 4&quot;);</span><br><span class="line">        e.onNext(4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribe(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">        Log.d(TAG, &quot;onNext:&quot; + integer);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>写在二十七岁</title>
      <link href="/2018/11/16/%E5%86%99%E5%9C%A8%E4%BA%8C%E5%8D%81%E4%B8%83%E5%B2%81/"/>
      <content type="html"><![CDATA[<blockquote><p>今天，我27岁了，从25岁开始后，感觉30岁离自己越来越近了，以前30岁对自己而言遥不可及，对自己而言只是一个概念，而现在，每每过一个生日，切实的，自己离30岁又近了一步了……</p></blockquote><a id="more"></a><ul><li>早上醒来，打开手机，收到妈妈发来的生日祝福和一个红包，时间是凌晨5点，她上班很早，每天都是这个点起床，很辛苦。</li><li>不知不觉地，这已经是来杭州的第三个生日了，记得在什么地方看到的一篇文章上说，“年纪越大觉得时间过得越快”的确，记忆中，只有童年的时光总是那么悠闲又漫长。</li><li>年少时看《三国演义》其中有一段很有感触，说是有这个故事：‘玄德自知语失，遂起身如厕。因见己身髀肉复生，亦不觉潸然流涕。……玄德长叹曰：“备往常身不离鞍，髀肉皆散；分久不骑，髀里肉生。日月磋跎，老将至矣，而功业不建，是以悲耳！”……’想想自己也即将到了而立之年，可还是一事无成、孑然一身，这一行工作了两年多了，因为懒，自己的技术也没有太多实质性的提升。</li><li>二十七岁，留给自己的时间不多了，人生过了三分之一多，留给职业生涯的时间更少了，多读书，多学习，提升自己，善待他人，相信未来，把握住此时此刻。培养起基于自己对待事物的判断力和见解，提升的自己的写作能力和英语能力，以及与他人良好的沟通能力。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>棠梨煎雪</title>
      <link href="/2018/11/16/%E6%A3%A0%E6%A2%A8%E7%85%8E%E9%9B%AA/"/>
      <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28188427&auto=0&height=66"></iframe><p>作曲 : 灰原穷<br><br>作词 : 商连<br></p><a id="more"></a><p>青鲤来时遥闻春溪声声碎<br><br>嗅得手植棠梨初发轻黄蕊<br><br>待小暑悄过 新梨渐垂<br><br>来邀东邻女伴撷果缓缓归<br></p><p>旧岁采得枝头细雪<br><br>今朝飘落胭脂梨叶<br><br>轻挼草色二三入卷<br><br>细呷春酒淡始觉甜<br></p><p>依旧是<br><br>偏爱枕惊鸿二字入梦的时节<br><br>烛火惺忪却可与她漫聊彻夜<br><br>早春暮春 酒暖花深<br><br>便好似一生心事只得一人来解<br></p><p>岁岁花藻檐下共将棠梨煎雪<br><br>自总角至你我某日辗转天边<br><br>天淡天青 宿雨沾襟<br><br>一年一会信笺却只见寥寥数言<br></p><p>旧岁采得枝头细雪<br><br>今朝飘落胭脂梨叶<br><br>轻挼草色二三入卷<br><br>细呷春酒淡始觉甜<br></p><p>依旧是<br><br>偏爱枕惊鸿二字入梦的时节<br><br>烛火惺忪却可与她漫聊彻夜<br><br>早春暮春 酒暖花深<br><br>便好似一生心事只得一人来解<br></p><p>岁岁花藻檐下共将棠梨煎雪<br><br>自总角至你我某日辗转天边<br><br>天淡天青 宿雨沾襟<br><br>一年一会信笺却只见寥寥数言<br></p><p>雨中灯市欲眠 原已萧萧数年<br><br>似有故人轻叩 再将棠梨煎雪<br><br>能否消得<br><br>你一路而来的半生风雪<br></p>]]></content>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android开发中，实现对Home按键的监听</title>
      <link href="/2018/11/10/Android%E5%BC%80%E5%8F%91%E4%B8%AD%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%AF%B9Home%E6%8C%89%E9%94%AE%E7%9A%84%E7%9B%91%E5%90%AC/"/>
      <content type="html"><![CDATA[<h1 id="Android开发中，实现Home按键的监听"><a href="#Android开发中，实现Home按键的监听" class="headerlink" title="Android开发中，实现Home按键的监听"></a>Android开发中，实现Home按键的监听</h1><blockquote><p>最近在项目中遇到需要监听用户点击Back以及Home按键，并作出相应操作。开始以为很简单，先实现了点击Back按键的监听，继而开始实现Home按键的监听，一次，二次都失败了，网上查看了多篇博客，都差强人意，实际运行后都实现不了，直到最后发现了一篇博客,特记录一下。<br>原文地址:<a href="https://blog.csdn.net/csdn_aiyang/article/details/76154374" target="_blank" rel="noopener">https://blog.csdn.net/csdn_aiyang/article/details/76154374</a></p></blockquote><a id="more"></a><p><img src="http://p9uaajhtk.bkt.clouddn.com/%E5%AE%9E%E7%8E%B0%E5%AF%B9Home%E9%94%AE%E7%9B%91%E5%90%AC.png" alt="http://p9uaajhtk.bkt.clouddn.com/%E5%AE%9E%E7%8E%B0%E5%AF%B9Home%E9%94%AE%E7%9B%91%E5%90%AC.png"></p><ul><li>注:因原主题代码显示不太美观，以后尽量用这种图片的形式展示。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> Android </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一首小诗</title>
      <link href="/2018/10/15/%E4%B8%80%E9%A6%96%E5%B0%8F%E8%AF%97/"/>
      <content type="html"><![CDATA[<h1 id="相信未来"><a href="#相信未来" class="headerlink" title="相信未来"></a>相信未来</h1><p>现代·食指 <br></p><p>当蜘蛛网无情地查封了我的炉台<br></p><p>当灰烬的余烟叹息着贫困的悲哀<br></p><a id="more"></a><p>我依然固执地铺平失望的灰烬<br></p><p>用美丽的雪花写下：相信未来<br></p><p>当我的紫葡萄化为深秋的露水<br></p><p>当我的鲜花依偎在别人的情怀<br></p><p>我依然固执地用凝霜的枯藤<br></p><p>在凄凉的大地上写下：相信未来<br></p><p>我要用手指那涌向天边的排浪<br></p><p>我要用手掌那托住太阳的大海<br></p><p>摇曳着曙光那枝温暖漂亮的笔杆<br></p><p>用孩子的笔体写下：相信未来<br></p><p>我之所以坚定地相信未来<br></p><p>是我相信未来人们的眼睛<br></p><p>她有拨开历史风尘的睫毛<br></p><p>她有看透岁月篇章的瞳孔<br></p><p>不管人们对于我们腐烂的皮肉<br></p><p>那些迷途的惆怅、失败的苦痛<br></p><p>是寄予感动的热泪、深切的同情<br></p><p>还是给以轻蔑的微笑、辛辣的嘲讽<br></p><p>我坚信人们对于我们的脊骨<br></p><p>那无数次的探索、迷途、失败和成功<br></p><p>一定会给予热情、客观、公正的评定<br></p><p>是的，我焦急地等待着他们的评定<br></p><p>朋友，坚定地相信未来吧<br></p><p>相信不屈不挠的努力<br></p><p>相信战胜死亡的年轻<br></p><p>相信未来、热爱生命<br></p><p>1968年 北京<br></p>]]></content>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>『前端学习笔记（四）』</title>
      <link href="/2018/08/28/%E3%80%8E%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E3%80%8F/"/>
      <content type="html"><![CDATA[<h1 id="CSS篇-二"><a href="#CSS篇-二" class="headerlink" title="CSS篇(二)"></a>CSS篇(二)</h1><h2 id="样式表的书写位置"><a href="#样式表的书写位置" class="headerlink" title="样式表的书写位置"></a>样式表的书写位置</h2><h3 id="内嵌式写法"><a href="#内嵌式写法" class="headerlink" title="内嵌式写法"></a>内嵌式写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">样式表写法</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="外链式写法"><a href="#外链式写法" class="headerlink" title="外链式写法"></a>外链式写法</h3><ul><li><p>1.先常见一个.css样式文件，暂命名为1.css</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">font: italic 700 54px microsoft yahei;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2.在需要引用的html中的head标签中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;1.css&quot;/&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="行内样式写法"><a href="#行内样式写法" class="headerlink" title="行内样式写法"></a>行内样式写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 style=&quot;font-size&quot;:30px; color:red;&quot;&gt;Android开发&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h3 id="三种写法各自特点"><a href="#三种写法各自特点" class="headerlink" title="三种写法各自特点"></a>三种写法各自特点</h3><ul><li>内嵌式写法，样式只作用与当前文件，没有真正实现结构表现分离。</li><li>外链式写法，作用范围是当前站点，谁调用谁生效，范围广，真正实现结构(html)与表现(css)分离。</li><li>行内样式写法，作用范围仅限于当前标签，范围小，结构表现混在一起。(不推荐使用)</li></ul><h2 id="标签按显示方式的分类"><a href="#标签按显示方式的分类" class="headerlink" title="标签按显示方式的分类"></a>标签按显示方式的分类</h2><h3 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h3><ul><li>典型代表: <code>div,h1-h6,p,ul,li</code></li><li>特点:<ol><li>独占一行</li><li>可以设置宽高</li><li>嵌套(包含)下，子块元素宽度(没有定义情况下)和父块元素宽度默认一致</li></ol></li></ul><h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><ul><li>典型代表: <code>span,a,strong,em,del,ins</code></li><li>特点:<ol><li>在一行上显示</li><li>不能直接设置宽高</li><li>元素的宽和高就是内容撑开的宽高</li></ol></li></ul><h3 id="行内块元素-内联元素"><a href="#行内块元素-内联元素" class="headerlink" title="行内块元素(内联元素)"></a>行内块元素(内联元素)</h3><ul><li>典型代表: <code>input,img</code></li><li>特点:<ol><li>在一行上显示</li><li>可以设置宽高</li></ol></li></ul><h3 id="块元素、行内元素"><a href="#块元素、行内元素" class="headerlink" title="块元素、行内元素"></a>块元素、行内元素</h3><h4 id="块元素转行内元素"><a href="#块元素转行内元素" class="headerlink" title="块元素转行内元素"></a>块元素转行内元素</h4><ul><li>显示在同一行</li><li><code>display: inline;</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div,p&#123;</span><br><span class="line">    display: inline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="行内元素转块元素"><a href="#行内元素转块元素" class="headerlink" title="行内元素转块元素"></a>行内元素转块元素</h4><ul><li>可以定义宽高</li><li><code>display: block;</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">span&#123;</span><br><span class="line">    display: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="块和行内元素转行内块元素"><a href="#块和行内元素转行内块元素" class="headerlink" title="块和行内元素转行内块元素"></a>块和行内元素转行内块元素</h4><ul><li>所有元素都在一行显示，并且可以定义宽高</li><li><code>display:inline-block;</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">div,a,span,strong&#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    width:200px;</span><br><span class="line">    height:200px;</span><br><span class="line">    background-color: yellow;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS三大特征"><a href="#CSS三大特征" class="headerlink" title="CSS三大特征"></a>CSS三大特征</h2><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><ul><li>当多个样式作用与同一个(同一类)标签时，样式发生了冲突，总是执行后面的代码(后面的代码层叠前边的代码)。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">font-size: 100px;</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line">.box2&#123;</span><br><span class="line">font-size: 200px;</span><br><span class="line">color: blue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p class=&quot;box box2&quot;&gt;Android开发&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;box&quot;&gt;iOS开发&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>“Android开发”字样会显示<code>.box2</code>的样式，也就是蓝色、200px字体</li><li>“iOS开发”字样因为只调用了<code>.box</code>样式，不存在层叠问题，所以显示<code>.box</code>属性，红色、100px字体</li></ul><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><ul><li>继承性发生的前提是包含(嵌套关系)<ul><li>文字颜色可以继承</li><li>文字大小可以继承</li><li>字体可以继承</li><li>字体粗细可以继承</li><li>文字风格可以继承</li><li>行高可以继承</li><li><strong>总结</strong>: 文字的所有属性都可以继承</li><li><strong>特殊情况:</strong><ul><li>h系列标签不能继承文字大小</li><li>a标签不能继承颜色</li></ul></li></ul></li></ul><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><ul><li>默认样式(0)&lt;标签选择器(1)&lt;类选择器(10)&lt;id选择器(100)&lt;行内样式(1000)&lt;<code>!important</code>(1000以上)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">/*标签选择器*/</span><br><span class="line">div&#123;</span><br><span class="line">color: red;</span><br><span class="line">font-size: 10px;</span><br><span class="line">&#125;</span><br><span class="line">/*类选择器*/</span><br><span class="line">.box&#123;</span><br><span class="line">color:pink;</span><br><span class="line">font-size: 20px;</span><br><span class="line">&#125;</span><br><span class="line">/*id选择器*/</span><br><span class="line">#con&#123;</span><br><span class="line">color: yellow;</span><br><span class="line">font-size: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;box&quot; id=&quot;con&quot; style=&quot;font-size: 40px; color: green&quot;&gt;Android开发&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>“Android开发”字样显示为绿色、40px大小。</li></ul><h4 id="优先级特点"><a href="#优先级特点" class="headerlink" title="优先级特点"></a>优先级特点</h4><h5 id="继承的权重为0"><a href="#继承的权重为0" class="headerlink" title="继承的权重为0"></a>继承的权重为0</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.father&#123;</span><br><span class="line">font-size: 60px;</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line">p&#123;</span><br><span class="line">font-size: 20px;</span><br><span class="line">color:blue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;father&quot;&gt;</span><br><span class="line">&lt;p&gt;Android开发&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>如上:当没有定义p标签样式时，”Android开发”字样显示为父标签的的样式<code>.father</code>，一旦加上p标签样式，就显示为p标签的样式。</li></ul><h5 id="权重会叠加"><a href="#权重会叠加" class="headerlink" title="权重会叠加"></a>权重会叠加</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">p.son&#123;</span><br><span class="line">font-size: 120px;</span><br><span class="line">color: yellow;</span><br><span class="line">&#125;</span><br><span class="line">p&#123;</span><br><span class="line">font-size: 30px;</span><br><span class="line">color:red;</span><br><span class="line">&#125;</span><br><span class="line">.son&#123;</span><br><span class="line">font-size: 60px;</span><br><span class="line">color: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;father&quot;&gt;</span><br><span class="line">&lt;p class=&quot;son&quot;&gt;Android开发&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>运行效果最终显示的是交集选择器<code>p.son</code>的样式</li><li>原理分析:<ul><li>标签选择器p的权重=1</li><li>类选择器<code>.son</code>的权重=10</li><li>根据CSS权重会叠加特性，故交集选择器<code>p.son</code>的权重=1+10，大于其他选择器权重，所以显示为该选择器属性</li></ul></li></ul><h2 id="连接伪类"><a href="#连接伪类" class="headerlink" title="连接伪类"></a>连接伪类</h2><ul><li>语法: <code>a:link{属性:值;}</code>或<code>a{属性:值;}</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a:link &#123;属性:值;&#125;      链接默认状态</span><br><span class="line">a:visited &#123;属性:值;&#125;   链接访问之后的状态</span><br><span class="line">a:hover &#123;属性:值;&#125;     鼠标放到链接上显示的状态</span><br><span class="line">a:active &#123;属性:值;&#125;    连接激活的状态(鼠标一直按着)</span><br><span class="line">: focus &#123;属性:值;&#125;     获取焦点</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">/*连接的默认状态*/</span><br><span class="line">a:link&#123;</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line">/*连接访问之后的状态（要想恢复需要先清除浏览器缓存）*/</span><br><span class="line">a:visited&#123;</span><br><span class="line">color:green;</span><br><span class="line">&#125;</span><br><span class="line">/*鼠标放在链接上的状态*/</span><br><span class="line">a:hover&#123;</span><br><span class="line">color:yellow;</span><br><span class="line">&#125;</span><br><span class="line">/*链接激活的状态*/</span><br><span class="line">a:active&#123;</span><br><span class="line">color: pink;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href=&quot;#&quot;&gt;Android开发&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="文本修饰"><a href="#文本修饰" class="headerlink" title="文本修饰"></a>文本修饰</h3><ul><li>Text-decoration:none(无下划线) | underline(有下划线) | line-through(删除线)</li></ul><h2 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h2><ul><li>background-color  背景颜色</li><li>background-image  背景图片</li><li>background-repeat:  背景平铺<ul><li>repeat 默认平铺</li><li>no-repeat  不平铺</li><li>repeat-x 沿x轴平铺</li><li>repeat-y 沿y轴平铺</li></ul></li><li>background-position 背景的定位<ul><li>left</li><li>right</li><li>center</li><li>top</li><li>bottom</li><li>背景定位的特点:<ul><li><code>background-position:right;</code>方位值只写一个的时候，另外一个值默认居中</li><li><code>background-position:right bottom;</code>写两个方位值的时候，顺序没有要求</li><li><code>background-position:20px 30px;</code>写2个具体值的时候，第一个代表水平方向，第二个代表垂直方向</li></ul></li></ul></li><li>background-attachment 背景是否滚动<ul><li>scroll 滚动</li><li>fixed 固定</li></ul></li><li>背景属性连写<ul><li><code>background:red url(1.jpg) no-repeat 30px 40px scroll;</code></li><li>连写的时候没有顺序要求，url为必填项</li></ul></li></ul>]]></content>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>『前端学习笔记（三）』</title>
      <link href="/2018/08/22/%E3%80%8E%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E3%80%8F/"/>
      <content type="html"><![CDATA[<h1 id="CSS篇-一"><a href="#CSS篇-一" class="headerlink" title="CSS篇(一)"></a>CSS篇(一)</h1><h2 id="CSS概念"><a href="#CSS概念" class="headerlink" title="CSS概念"></a>CSS概念</h2><ul><li>CSS 指层叠样式表 (Cascading Style Sheets)(级联样式表)</li><li>CSS是用来美化html标签的，相当于页面化妆。</li><li>样式表书写位置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">样式表内容</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><ul><li>选择器是一个选择谁（标签）的过程。</li><li><code>标签{属性:值;}</code></li><li>相关属性</li></ul><table><thead><tr><th>属性</th><th>解释</th></tr></thead><tbody><tr><td>Width:20px;</td><td>宽</td></tr><tr><td>Height:20px;</td><td>高</td></tr><tr><td>Background-color:red;</td><td>背景颜色</td></tr><tr><td>font-size:24px;</td><td>文字大小</td></tr><tr><td>text-align:left,center,right</td><td>内容的水平对齐方式</td></tr><tr><td>text-indent:2em;</td><td>首行缩进</td></tr><tr><td>Color:red;</td><td>文字颜色</td></tr></tbody></table><h3 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h3><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><ul><li><code>标签{属性:值;}</code></li><li>特点:标签选择器定义之后，会将页面所有的元素都执行这个标签样式。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">p&#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 20px;</span><br><span class="line">background-color: yellow;</span><br><span class="line">font-size: 20px;</span><br><span class="line">color: 20px;</span><br><span class="line">&#125;</span><br><span class="line">div&#123;</span><br><span class="line">background-color: pink;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;Android&lt;/p&gt;</span><br><span class="line">&lt;div&gt;IOS&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><ul><li>写法:<code>.自定义类名{属性:值;  属性:值;}</code></li><li><p>特点:</p><ol><li>谁调用，谁生效</li><li>一个标签可以调用多个类选择器</li><li>多个标签可以调用同一个类选择器</li></ol></li><li><p>命名规则:</p><ol><li>不能用纯数字或数字开头来定义类名</li><li>不能使用特殊符号或者是特殊符号开头来定义类名</li><li>不建议使用汉字来定义类名</li><li>不推荐使用属性或者属性的值来定义类名</li></ol></li><li><p>常用命名的单词</p><ol><li>头:head</li><li>内容:content/container</li><li>尾:footer</li><li>导航:nav</li><li>侧栏:sidebar   </li><li>栏目:column</li><li>页面外围控制整体布局宽度:wrapper</li><li>左右中:left right center</li><li>登录条:loginbar</li><li>标志:logo</li><li>广告:banner</li><li>页面主体:main</li><li>热点:hot</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">text-align: right;</span><br><span class="line">background-color: green</span><br><span class="line">&#125;</span><br><span class="line">.egg&#123;</span><br><span class="line">width: 500px;</span><br><span class="line">height: 100px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p class=&quot;box egg&quot;&gt;Android&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h4><ul><li>写法 <code>#自定义名称{属性:值;}</code></li><li>特点: <ol><li>一个ID选择器在一个页面只能调用一次。如果使用2次或者2次以上，不符合w3c规范，JS调用会出问题</li><li>一个标签只能调用一个ID选择器</li><li>一个标签可以同时调用类选择器和ID选择器</li></ol></li><li>示例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">#ega&#123;</span><br><span class="line">background-color: red;</span><br><span class="line">width: 500px;</span><br><span class="line">height: 100px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p id=&quot;ega&quot;&gt;Android&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Android&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h4><ul><li>写法: <code>*{属性:值;}</code></li><li>特点: 给所有的标签都使用相同的样式，不推荐使用，会增加浏览器和服务器的负担。</li></ul><h4 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h4><ul><li>概念: 两个或者两个以上的基础选择器通过不同的方式连接在一起</li><li>分类<ol><li>交集选择器</li><li>后代选择器</li><li>子代选择器</li><li>并集选择器</li></ol></li></ul><h5 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h5><ul><li>写法: <code>标签+类（ID）选择器{属性：值；}</code></li><li>特点: 即要满足使用了某个标签，还要满足使用了类(ID)选择器。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">font-size: 100px;</span><br><span class="line">color: yellow;</span><br><span class="line">&#125;</span><br><span class="line">#egg&#123;</span><br><span class="line">background-color: red;</span><br><span class="line">&#125;</span><br><span class="line">span.box&#123;</span><br><span class="line">width: 1000px;</span><br><span class="line">height: 500px;</span><br><span class="line">&#125;</span><br><span class="line">h1#weather&#123;</span><br><span class="line">background-color: blue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;Android开发&lt;/div&gt;</span><br><span class="line">&lt;p id=&quot;egg&quot;&gt;ios开发&lt;/p&gt;</span><br><span class="line">&lt;span class=&quot;box&quot;&gt;Web前端开发&lt;/span&gt; </span><br><span class="line">&lt;h1 id=&quot;weather&quot;&gt;java Web后台开发&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h5 id="后代选择器-重点"><a href="#后代选择器-重点" class="headerlink" title="后代选择器(重点)"></a>后代选择器(重点)</h5><ul><li>写法: <code>选择器+空格+选择器{属性:值;}</code></li><li>含义: 后代选择器首选要满足包含(嵌套)关系。父集元素在前边，子集元素在后边。</li><li>特点: 无限制隔代。只要能代表标签，标签、类选择器、ID选择器自由组合。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">font-size: 100px;</span><br><span class="line">&#125;</span><br><span class="line">#miss&#123;</span><br><span class="line">background-color: yellow;</span><br><span class="line">&#125;</span><br><span class="line">.box p&#123;</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;&lt;p&gt;&lt;span&gt;Android开发&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;&lt;span&gt;iOS开发&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&lt;span id=&quot;miss&quot;&gt;iOS开发&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h5 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h5><ul><li>写法: <code>选择器&gt;选择器{属性:值;}</code></li><li>特点: 选中直接下一代元素。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">div&gt;p&#123;</span><br><span class="line">color: red;</span><br><span class="line">font-size: 50px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;span&gt;&lt;p&gt;Android开发&lt;/p&gt;&lt;/span&gt;</span><br><span class="line">&lt;p&gt;iOS开发&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h5 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h5><ul><li>写法: <code>选择器+，+选择器+，选择器{属性:值;}</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.box,#miss,span,h1&#123;</span><br><span class="line">font-size: 100px;</span><br><span class="line">color: #fff;</span><br><span class="line">background-color: green;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;Android开发&lt;/div&gt;</span><br><span class="line">&lt;p id=&quot;miss&quot;&gt;iOS开发&lt;/p&gt;</span><br><span class="line">&lt;span&gt;Web开发&lt;/span&gt;</span><br><span class="line">&lt;h1&gt;java 后端开发&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="文本元素"><a href="#文本元素" class="headerlink" title="文本元素"></a>文本元素</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li>font-size:16px; 文字大小</li><li>font-weight:700; (100-900)，文字粗细，不推荐使用font-weight:bold;</li><li>font-family:微软雅黑; 文本的字体</li><li>font-style:normal | italic; normal 默认值 italic 斜体</li><li>line-height: 行高</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">div&#123;</span><br><span class="line">font-size: 16px;</span><br><span class="line">font-weight:700;</span><br><span class="line">font-family:微软雅黑;</span><br><span class="line">font-style:italic;</span><br><span class="line">line-height:40px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;Android开发&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="文本属性连写"><a href="#文本属性连写" class="headerlink" title="文本属性连写"></a>文本属性连写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font: font-style font-weight  font-size/line-height  font-family;</span><br></pre></td></tr></table></figure><ul><li>注意:font:后面写属性的，一定要按照书写顺序，文本属性连写文字大小和字体为必写项。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Font:italic 700 16px/40px  微软雅黑;</span><br></pre></td></tr></table></figure><h3 id="文字的表达方式"><a href="#文字的表达方式" class="headerlink" title="文字的表达方式"></a>文字的表达方式</h3><ul><li><p>直接写中文名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">font-family: 微软雅黑;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>写字体的英文名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">font-family: microsoft yahei;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>写unicode编码</p></li></ul><p><img src="http://p9uaajhtk.bkt.clouddn.com/unicode%E7%BC%96%E7%A0%81.png" alt=""></p>]]></content>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> Web前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>『前端学习笔记（二）』</title>
      <link href="/2018/08/21/%E3%80%8E%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E3%80%8F/"/>
      <content type="html"><![CDATA[<h1 id="Html篇-二"><a href="#Html篇-二" class="headerlink" title="Html篇(二)"></a>Html篇(二)</h1><h2 id="关键字（head标签中）"><a href="#关键字（head标签中）" class="headerlink" title="关键字（head标签中）"></a>关键字（head标签中）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;keywords&quot; content=&quot;文本内容&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="网页描述（head标签中）"><a href="#网页描述（head标签中）" class="headerlink" title="网页描述（head标签中）"></a>网页描述（head标签中）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;description&quot; content=&quot;文本内容&quot;/&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="网页重定向（head标签中）"><a href="#网页重定向（head标签中）" class="headerlink" title="网页重定向（head标签中）"></a>网页重定向（head标签中）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;refresh&quot; content=&quot;5; http://www.example.com&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="连接外部样式表（head标签中）"><a href="#连接外部样式表（head标签中）" class="headerlink" title="连接外部样式表（head标签中）"></a>连接外部样式表（head标签中）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;1.css&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="设置icon图标（head标签中）"><a href="#设置icon图标（head标签中）" class="headerlink" title="设置icon图标（head标签中）"></a>设置icon图标（head标签中）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;icon&quot; href=&quot;favicon.ico&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><ul><li>展示数据，是对网页重构的一个有益补充</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;table border=&quot;1&quot; width=&quot;500&quot; height=&quot;300&quot; cellspacing=&quot;0&quot; cellpadding=&quot;10&quot; align=&quot;center&quot; bgcolor=&quot;yellow&quot;&gt;             表格</span><br><span class="line">    &lt;tr&gt;            行</span><br><span class="line">    &lt;td&gt;&lt;/td&gt;       列</span><br><span class="line">    &lt;td&gt;&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><ul><li>属性<ul><li>border=”1” 边框</li><li>width=”500”宽度</li><li>height=”300”高</li><li>cellspacing=”2”单元格与单元格的距离</li><li>cellpadding=”2”内容边框的距离</li><li>align=”left | right | center”</li><li>如果直接给表格用align=”center”,表格居中</li><li>如果给tr或者td使用，tr或者td内容居中</li><li>bgcolor=”red” 背景颜色</li></ul></li></ul><h3 id="表格的标准结构"><a href="#表格的标准结构" class="headerlink" title="表格的标准结构"></a>表格的标准结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">    &lt;tfoot&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/tfoot&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><h3 id="表头和单元格的合并"><a href="#表头和单元格的合并" class="headerlink" title="表头和单元格的合并"></a>表头和单元格的合并</h3><h4 id="添加表头"><a href="#添加表头" class="headerlink" title="添加表头"></a>添加表头</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;caption&gt;表头名&lt;/caption&gt;</span><br></pre></td></tr></table></figure><h4 id="单元格的合并"><a href="#单元格的合并" class="headerlink" title="单元格的合并"></a>单元格的合并</h4><ul><li><p>原表如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;table border=&quot;1&quot; width=&quot;500&quot; height=&quot;300&quot; align=&quot;left&quot;&gt;</span><br><span class="line">&lt;caption&gt;表头&lt;/caption&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">      &lt;td&gt;张三&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;22&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;前端工程师&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">      &lt;td&gt;李四&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;20&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;Android开发工程师&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">      &lt;td&gt;王五&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;18&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;java后台开发工程师&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure></li><li><p>预览效果</p></li></ul><p><img src="http://p9uaajhtk.bkt.clouddn.com/%E5%90%88%E5%B9%B6%E5%8D%95%E5%85%83%E6%A0%BC1.png" alt="合并单元格1"></p><h5 id="合并同一行上的单元格-colspan"><a href="#合并同一行上的单元格-colspan" class="headerlink" title="合并同一行上的单元格(colspan)"></a>合并同一行上的单元格(colspan)</h5><ul><li><p>合并第一行“张三”、“22”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;table border=&quot;1&quot; width=&quot;500&quot; height=&quot;300&quot; align=&quot;left&quot;&gt;</span><br><span class="line">&lt;caption&gt;表头&lt;/caption&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">      &lt;td colspan=&quot;2&quot;&gt;张三 22&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">      &lt;td&gt;前端工程师&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">      &lt;td&gt;李四&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;20&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;Android开发工程师&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">      &lt;td&gt;王五&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;18&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;java后台开发工程师&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure></li><li><p>预览效果如下<br><img src="http://p9uaajhtk.bkt.clouddn.com/%E5%90%88%E5%B9%B6%E5%8D%95%E5%85%83%E6%A0%BC2.png" alt="合并单元格2"></p></li></ul><h5 id="合并同一列上的单元格-rowspan"><a href="#合并同一列上的单元格-rowspan" class="headerlink" title="合并同一列上的单元格(rowspan)"></a>合并同一列上的单元格(rowspan)</h5><ul><li><p>合并第三列的的职位单元格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;table border=&quot;1&quot; width=&quot;500&quot; height=&quot;300&quot; align=&quot;left&quot;&gt;</span><br><span class="line">&lt;caption&gt;表头&lt;/caption&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">      &lt;td colspan=&quot;2&quot;&gt;张三 22&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">      &lt;td rowspan=&quot;3&quot;&gt;前端工程师&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">      &lt;td&gt;李四&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;20&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">      &lt;td&gt;王五&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;18&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure></li><li><p>效果如下</p></li></ul><p><img src="http://p9uaajhtk.bkt.clouddn.com/%E5%90%88%E5%B9%B6%E5%8D%95%E5%85%83%E6%A0%BC3.png" alt="合并单元格3"></p><h4 id="表格标题"><a href="#表格标题" class="headerlink" title="表格标题"></a>表格标题</h4><ul><li><code>&lt;th&gt;&lt;/th&gt;</code></li><li><p>给上表添加标题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;table border=&quot;1&quot; width=&quot;500&quot; height=&quot;300&quot; align=&quot;left&quot;&gt;</span><br><span class="line">&lt;caption&gt;表头&lt;/caption&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">      &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">      &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">      &lt;th&gt;职位&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">      &lt;td&gt;张三&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;22&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;前端工程师&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">      &lt;td&gt;李四&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;20&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;Android开发工程师&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">      &lt;td&gt;王五&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;18&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;java后台开发工程师&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure></li><li><p>预览效果</p></li></ul><p><img src="http://p9uaajhtk.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0%E6%A0%87%E9%A2%98.png" alt="添加标题"></p><h4 id="边框颜色"><a href="#边框颜色" class="headerlink" title="边框颜色"></a>边框颜色</h4><ul><li><code>bordercolor=&quot;red&quot;</code></li></ul><h4 id="内容垂直显示"><a href="#内容垂直显示" class="headerlink" title="内容垂直显示"></a>内容垂直显示</h4><ul><li><code>&lt;td valign=&quot;bottom&quot;&gt;张三&lt;/td&gt;</code><ul><li>valign=”top | middle | bottom”</li></ul></li></ul><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><ul><li>表单的作用是收集信息</li></ul><h3 id="表单的组成"><a href="#表单的组成" class="headerlink" title="表单的组成"></a>表单的组成</h3><ul><li>提示信息</li><li>表单控件</li><li>表单域</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li><code>&lt;form action=&quot;1.php&quot; method=&quot;get&quot;&gt;&lt;/form&gt;</code><ul><li>属性:action处理信息</li><li>method=”get|post”</li><li>get通过地址栏提供(传输)信息，安全性差</li><li>post通过1.php来处理信息，安全性高</li></ul></li></ul><h4 id="文本输入框"><a href="#文本输入框" class="headerlink" title="文本输入框"></a>文本输入框</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名:&lt;input type=&quot;text&quot; maxlength=&quot;6&quot; readonly=&quot;readonly&quot; disabled=&quot;disabled&quot; name=&quot;username&quot; value=&quot;大前端&quot;/&gt;</span><br></pre></td></tr></table></figure><ul><li>maxlength=”6” 限制输入字符长度</li><li>readonly=”readonly” 将输入框设置为只读状态(不能编辑)</li><li>disabled=”disabled” 输入框未激活状态</li><li>name=”username” 输入框的名称</li><li>value=”前端” 将输入框的内容传给处理文件</li></ul><h4 id="密码输入框"><a href="#密码输入框" class="headerlink" title="密码输入框"></a>密码输入框</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">密码:&lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;radio&quot; name=&quot;gender&quot; checked=&quot;checked&quot;&gt;男</span><br></pre></td></tr></table></figure><ul><li>只有将name的值设置相同的时候，才能实现单选效果</li><li>checked=”checked”设置默认选择项</li></ul><h4 id="下拉列表"><a href="#下拉列表" class="headerlink" title="下拉列表"></a>下拉列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;select multiple=&quot;multiple&quot;&gt;</span><br><span class="line">&lt;option&gt;下拉列表选项&lt;/option&gt;</span><br><span class="line">&lt;option selected=&quot;selected&quot;&gt;下拉列表选项&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><ul><li>Multiple=”multiple”将下拉列表设置为多选项</li><li>selected=”selected”设置默认选中项目</li></ul><h4 id="对下拉列表进行分组"><a href="#对下拉列表进行分组" class="headerlink" title="对下拉列表进行分组"></a>对下拉列表进行分组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;optgroup label=&quot;北京市&quot;&gt;</span><br><span class="line">    &lt;option&gt;朝阳区&lt;/option&gt;</span><br><span class="line">    &lt;option&gt;昌平区&lt;/option&gt;</span><br><span class="line">    &lt;option&gt;海淀区&lt;/option&gt;</span><br><span class="line">&lt;/optgroup&gt;</span><br></pre></td></tr></table></figure><h4 id="多选框"><a href="#多选框" class="headerlink" title="多选框"></a>多选框</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot;&gt;抽烟</span><br><span class="line">&lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot;&gt;喝酒</span><br><span class="line">&lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot;&gt;烫头</span><br></pre></td></tr></table></figure><ul><li>checked=”checked”设置默认选中项</li></ul><h4 id="多行文本框"><a href="#多行文本框" class="headerlink" title="多行文本框"></a>多行文本框</h4><ul><li><code>&lt;textarea cols=&quot;130&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt;</code><ul><li>cols 控制输入字符的长度</li><li>rows 控制输入的行数</li></ul></li></ul><h4 id="文件上传控件"><a href="#文件上传控件" class="headerlink" title="文件上传控件"></a>文件上传控件</h4><ul><li><code>&lt;input type=&quot;file&quot;&gt;</code></li></ul><h4 id="文件提交按钮"><a href="#文件提交按钮" class="headerlink" title="文件提交按钮"></a>文件提交按钮</h4><ul><li><code>&lt;input type=&quot;submit&quot;&gt;</code> 可实现信息提交功能</li></ul><h4 id="普通按钮"><a href="#普通按钮" class="headerlink" title="普通按钮"></a>普通按钮</h4><ul><li><code>&lt;input type=&quot;button&quot; value=&quot;普通按钮&quot;&gt;</code><ul><li>不能提交信息，配合js使用</li></ul></li></ul><h4 id="图片按钮"><a href="#图片按钮" class="headerlink" title="图片按钮"></a>图片按钮</h4><ul><li><code>&lt;input type=&quot;image&quot; src=&quot;pic.jpg&quot;&gt;</code><ul><li>图片按钮可实现信息提交功能</li></ul></li></ul><h4 id="重置按钮"><a href="#重置按钮" class="headerlink" title="重置按钮"></a>重置按钮</h4><ul><li><code>&lt;input type=&quot;reset&quot;&gt;</code><ul><li>将信息重置到默认状态</li></ul></li></ul><h4 id="表单信息分组"><a href="#表单信息分组" class="headerlink" title="表单信息分组"></a>表单信息分组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;1.php&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &lt;fieldset&gt;</span><br><span class="line">        &lt;legend&gt;分组信息&lt;/legend&gt;    </span><br><span class="line">    &lt;/fieldset&gt;</span><br><span class="line">&lt;form&gt;</span><br></pre></td></tr></table></figure><ul><li><code>&lt;fieldset&gt;&lt;/fieldset&gt;</code>对表单信息分组</li><li><code>&lt;legend&gt;&lt;/legend&gt;</code> 表单信息分组名称</li></ul><h4 id="Html5补充表单控件"><a href="#Html5补充表单控件" class="headerlink" title="Html5补充表单控件"></a>Html5补充表单控件</h4><ul><li>网址控件<ul><li><code>&lt;input type=&quot;url&quot;&gt;</code></li></ul></li><li>日期控件<ul><li><code>&lt;input type=&quot;date&quot;&gt;</code></li></ul></li><li>时间控件<ul><li><code>&lt;input type=&quot;time&quot;&gt;</code></li></ul></li><li>数字控件<ul><li><code>&lt;input type=&quot;number&quot;&gt;</code></li></ul></li><li>滑块控件<ul><li><code>&lt;input type=&quot;range&quot;&gt;</code></li></ul></li></ul>]]></content>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> Web前端 </tag>
            
            <tag> Html </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>『前端学习笔记（一）』</title>
      <link href="/2018/08/20/%E3%80%8E%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E3%80%8F/"/>
      <content type="html"><![CDATA[<h1 id="Html篇-一"><a href="#Html篇-一" class="headerlink" title="Html篇(一)"></a>Html篇(一)</h1><h2 id="Windows常用快捷键"><a href="#Windows常用快捷键" class="headerlink" title="Windows常用快捷键"></a>Windows常用快捷键</h2><table><thead><tr><th>快捷键</th><th>含义</th></tr></thead><tbody><tr><td>Ctrl+c</td><td>复制</td></tr><tr><td>Ctrl+v</td><td>粘贴</td></tr><tr><td>Ctrl+x</td><td>剪切</td></tr><tr><td>Ctrl+a</td><td>全选</td></tr><tr><td>Ctrl+s</td><td>保存</td></tr><tr><td>Ctrl+z</td><td>撤销</td></tr><tr><td>Windows+d</td><td>返回桌面</td></tr><tr><td>Windows+e</td><td>我的电脑</td></tr><tr><td>Windows+r</td><td>打开运行</td></tr><tr><td>Alt+tab</td><td>切换软件</td></tr><tr><td>Ctrl+tab</td><td>软件内文档之间切换</td></tr><tr><td>F2</td><td>重命名</td></tr><tr><td>F5</td><td>刷新页面</td></tr></tbody></table><a id="more"></a><h2 id="Sublime快捷键"><a href="#Sublime快捷键" class="headerlink" title="Sublime快捷键"></a>Sublime快捷键</h2><table><thead><tr><th>快捷键</th><th>含义</th></tr></thead><tbody><tr><td>Html:xt+tab</td><td>Html结构代码</td></tr><tr><td>!+tab</td><td>Html5的标签结构</td></tr><tr><td>tab</td><td>补全标签代码</td></tr><tr><td>Ctrl+shift+d</td><td>快速复制一行</td></tr><tr><td>Ctrl+shift+k</td><td>快速删除一行</td></tr><tr><td>Ctrl+鼠标左键单击</td><td>集体输入</td></tr><tr><td>Ctrl+h</td><td>查找替换</td></tr><tr><td>Ctrl+f</td><td>查找</td></tr><tr><td>Ctrl+/</td><td>注释</td></tr><tr><td>Ctrl+L</td><td>快速选择一行</td></tr><tr><td>Ctrl+shift+↑（↓）</td><td>快速上移(下移)一行</td></tr><tr><td>F11</td><td>全屏</td></tr></tbody></table><h2 id="Html结构标准"><a href="#Html结构标准" class="headerlink" title="Html结构标准"></a>Html结构标准</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;     声明文档类型</span><br><span class="line">&lt;html&gt;                 根标签</span><br><span class="line">&lt;head&gt;                 头标签</span><br><span class="line">&lt;title&gt;&lt;/title&gt;         标题标签</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;&lt;/body&gt;           主体标签</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><h3 id="单标签"><a href="#单标签" class="headerlink" title="单标签"></a>单标签</h3><ul><li>注释标签 <code>&lt;!--注释标签--&gt;</code></li><li>换行标签 <code>&lt;br/&gt;</code></li><li>水平线标签 <code>&lt;hr/&gt;</code></li></ul><h3 id="双标签"><a href="#双标签" class="headerlink" title="双标签"></a>双标签</h3><ul><li><p>段落标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;文本内容&lt;/p&gt;</span><br></pre></td></tr></table></figure></li><li><p>标题标签</p><ul><li>h1-h6</li><li>h1标签在一个页面里只能出现一次<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;段落1&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;段落2&lt;/h2&gt;</span><br><span class="line">&lt;h3&gt;段落3&lt;/h3&gt;</span><br><span class="line">&lt;h4&gt;段落4&lt;/h4&gt;</span><br><span class="line">&lt;h5&gt;段落5&lt;/h5&gt;</span><br><span class="line">&lt;h6&gt;段落6&lt;/h6&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>文本标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;font size=6 color=&quot;red&quot;&gt;文本内容&lt;/font&gt;</span><br></pre></td></tr></table></figure></li><li><p>文本加粗标签</p><ul><li>工作尽量用strong</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;strong&gt;文本&lt;/strong&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt;文本&lt;/b&gt;</span><br></pre></td></tr></table></figure><ul><li>文本倾斜标签<ul><li>工作尽量用em</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;em&gt;文本&lt;/em&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i&gt;文本&lt;/i&gt;</span><br></pre></td></tr></table></figure><ul><li>删除线标签<ul><li>工作尽量使用del</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;del&gt;文本&lt;/del&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s&gt;文本&lt;/s&gt;</span><br></pre></td></tr></table></figure><ul><li>下划线标签<ul><li>工作里尽量用用ins</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ins&gt;文本&lt;/ins&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;文本&lt;/u&gt;</span><br></pre></td></tr></table></figure><h3 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;pic.jpg&quot; alt=&quot;替换文本&quot; title=&quot;提示文本&quot; width=&quot;300&quot; height=&quot;500&quot;/&gt;</span><br></pre></td></tr></table></figure><ul><li>src:图片的来源，必写属性</li><li>alt:替换文本，图片不显示的时候显示的文字</li><li>title:提示文本，鼠标放到图片上显示的文字</li><li>width:图片宽度</li><li>height:图片高度</li><li><strong>注</strong>:图片没有定义宽高的时候，图片按照百分之百比例显示，如果只是改变了图片的宽或高，图片等比例缩放</li></ul><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><h4 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h4><ul><li>相对于文件自身出发，就是相对路径</li></ul><h5 id="文件和图片-html文档-在同一个目录-文件夹-，直接写文件名"><a href="#文件和图片-html文档-在同一个目录-文件夹-，直接写文件名" class="headerlink" title="文件和图片(html文档)在同一个目录(文件夹)，直接写文件名"></a>文件和图片(html文档)在同一个目录(文件夹)，直接写文件名</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;pic.jpg&quot; alt=&quot;替换文本&quot; title=&quot;提示文本&quot;/&gt;</span><br></pre></td></tr></table></figure><h5 id="图片-html文档-在文件的下一级目录里，文件夹名称-”-“-图片-html文档-名称"><a href="#图片-html文档-在文件的下一级目录里，文件夹名称-”-“-图片-html文档-名称" class="headerlink" title="图片(html文档)在文件的下一级目录里，文件夹名称+”/“+图片(html文档)名称"></a>图片(html文档)在文件的下一级目录里，文件夹名称+”/“+图片(html文档)名称</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;文件夹名/pic.jpg&quot; alt=&quot;替换文本&quot; title=&quot;提示文本&quot;/&gt;</span><br></pre></td></tr></table></figure><h5 id="图片-html-在文件的上一级目录里，-”-“-图片-html-名称"><a href="#图片-html-在文件的上一级目录里，-”-“-图片-html-名称" class="headerlink" title="图片(html)在文件的上一级目录里，..+”/“+图片(html)名称"></a>图片(html)在文件的上一级目录里，..+”/“+图片(html)名称</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;../pic.jpg&quot; alt=&quot;替换文本&quot; title=&quot;提示文本&quot;/&gt;</span><br></pre></td></tr></table></figure><h5 id="图片在文件的上一级的其他目录里，-”-“-文件夹名称-”-“-图片名称"><a href="#图片在文件的上一级的其他目录里，-”-“-文件夹名称-”-“-图片名称" class="headerlink" title="图片在文件的上一级的其他目录里，..+”/“+文件夹名称+”/“+图片名称"></a>图片在文件的上一级的其他目录里，..+”/“+文件夹名称+”/“+图片名称</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;../文件夹名称/pic.jpg&quot; alt=&quot;替换文本&quot; title=&quot;提示文本&quot;/&gt;</span><br></pre></td></tr></table></figure><h4 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;F:\文件夹\pic.jpg&quot; alt=&quot;替换文本&quot; title=&quot;提示文本&quot;/&gt;</span><br></pre></td></tr></table></figure><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;文件.html&quot; title=&quot;图片标签&quot; target=&quot;_self&quot;&gt;超链接&lt;/a&gt;</span><br></pre></td></tr></table></figure><ul><li>href:跳转的路径(跳转的页面)，必写属性</li><li>title:提示文本，鼠标放到链接上显示的文字</li><li>target=”_self” 默认值，在自身页面打开(关闭自身页面，打开链接页面)</li><li>target=”_blank”打开新页面(自身页面不关闭，打开一个新的页面)</li></ul><h4 id="锚链接"><a href="#锚链接" class="headerlink" title="锚链接"></a>锚链接</h4><ol><li>先定义一个锚点 <code>&lt;p id=&quot;sd&quot;&gt;</code></li><li>超链接到锚点 <code>&lt;a href=&quot;#sd&quot;&gt;回到顶部&lt;/a&gt;</code></li></ol><h4 id="空链"><a href="#空链" class="headerlink" title="空链"></a>空链</h4><ul><li>不知道链接到哪个页面的时候，用空链<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;#&quot;&gt;空链&lt;/a&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="压缩文件下载-不推荐使用"><a href="#压缩文件下载-不推荐使用" class="headerlink" title="压缩文件下载(不推荐使用)"></a>压缩文件下载(不推荐使用)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;../../文件.rar&quot;&gt;压缩包&lt;/a&gt;</span><br></pre></td></tr></table></figure><h4 id="超链接优化写法"><a href="#超链接优化写法" class="headerlink" title="超链接优化写法"></a>超链接优化写法</h4><ul><li>让所有的超链接都在新窗口打开<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;base target=&quot;_blank&quot;&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><p><img src="http://p9uaajhtk.bkt.clouddn.com/%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6.png" alt="特殊字符"></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul type=&quot;disc&quot;&gt;</span><br><span class="line">&lt;li&gt;文本&lt;/li&gt;    列表项</span><br><span class="line">&lt;li&gt;文本&lt;/li&gt;</span><br><span class="line">&lt;li&gt;文本&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><ul><li>type=”square” 小方块</li><li>type=”disc” 实心小圆圈(默认)</li><li>type=”circle” 空心小圆圈</li></ul><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol type=&quot;1&quot; start=&quot;3&quot;&gt;</span><br><span class="line">&lt;li&gt;文本&lt;/li&gt;    列表项</span><br><span class="line">&lt;li&gt;文本&lt;/li&gt;</span><br><span class="line">&lt;li&gt;文本&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure><ul><li>type=”1、a、A、i、I” </li><li>start决定了开始的位置</li></ul><h4 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &lt;dl&gt;</span><br><span class="line">  &lt;dt&gt;&lt;/dt&gt;</span><br><span class="line">  &lt;dd&gt;&lt;/dd&gt;</span><br><span class="line">  &lt;dd&gt;&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br></pre></td></tr></table></figure><h3 id="音乐标签"><a href="#音乐标签" class="headerlink" title="音乐标签"></a>音乐标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;embed src=&quot;1.mp3&quot; hidden=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure><h3 id="滚动"><a href="#滚动" class="headerlink" title="滚动"></a>滚动</h3><p><img src="http://p9uaajhtk.bkt.clouddn.com/%E6%BB%9A%E5%8A%A8.png" alt="滚动"></p>]]></content>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> Web前端 </tag>
            
            <tag> Html </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一组漫画</title>
      <link href="/2018/08/17/%E4%B8%80%E7%BB%84%E6%BC%AB%E7%94%BB/"/>
      <content type="html"><![CDATA[<blockquote><p>原文转载知乎，作者:<a href="https://www.zhihu.com/people/jin-shu-kun-59/activities" target="_blank" rel="noopener">https://www.zhihu.com/people/jin-shu-kun-59/activities</a></p></blockquote><p><img src="http://p9uaajhtk.bkt.clouddn.com/mh%20%281%29.jpg" alt=""></p><a id="more"></a><p><img src="http://p9uaajhtk.bkt.clouddn.com/mh%20%282%29.jpg" alt=""></p><p><img src="http://p9uaajhtk.bkt.clouddn.com/mh%20%283%29.jpg" alt=""></p><p><img src="http://p9uaajhtk.bkt.clouddn.com/mh%20%284%29.jpg" alt=""></p><p><img src="http://p9uaajhtk.bkt.clouddn.com/mh%20%285%29.jpg" alt=""></p><p><img src="http://p9uaajhtk.bkt.clouddn.com/mh%20%286%29.jpg" alt=""></p><p><img src="http://p9uaajhtk.bkt.clouddn.com/mh%20%287%29.jpg" alt=""></p><p><img src="http://p9uaajhtk.bkt.clouddn.com/mh%20%288%29.jpg" alt=""></p><p><img src="http://p9uaajhtk.bkt.clouddn.com/mh%20%289%29.jpg" alt=""></p><p><img src="http://p9uaajhtk.bkt.clouddn.com/mh%20%2810%29.jpg" alt=""></p><p><img src="http://p9uaajhtk.bkt.clouddn.com/mh%20%2811%29.jpg" alt=""></p><p><img src="http://p9uaajhtk.bkt.clouddn.com/mh%20%2812%29.jpg" alt=""></p><p><img src="http://p9uaajhtk.bkt.clouddn.com/mh%20%2813-2%29.jpg" alt=""></p><p><img src="http://p9uaajhtk.bkt.clouddn.com/mh%20%2814%29.jpg" alt=""></p><p><img src="http://p9uaajhtk.bkt.clouddn.com/mh%20%2815%29.jpg" alt=""></p><p><img src="http://p9uaajhtk.bkt.clouddn.com/mh%20%2816%29.jpg" alt=""></p><p><img src="http://p9uaajhtk.bkt.clouddn.com/mh%20%2817%29.jpg" alt=""></p><p><img src="http://p9uaajhtk.bkt.clouddn.com/mh%20%2818%29.jpg" alt=""></p><p><img src="http://p9uaajhtk.bkt.clouddn.com/mh%20%2819%29.jpg" alt=""></p><p><img src="http://p9uaajhtk.bkt.clouddn.com/mh%20%2820%29.jpg" alt=""></p><p><img src="http://p9uaajhtk.bkt.clouddn.com/mh%20%2821%29.jpg" alt=""></p><p><img src="http://p9uaajhtk.bkt.clouddn.com/mh%20%2822%29.jpg" alt=""></p><p><img src="http://p9uaajhtk.bkt.clouddn.com/mh%20%2823%29.jpg" alt=""></p>]]></content>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TextView显示html文本</title>
      <link href="/2018/07/26/TextView%E6%98%BE%E7%A4%BAhtml%E6%96%87%E6%9C%AC/"/>
      <content type="html"><![CDATA[<blockquote><p>以前在项目中遇到一个需求就是，在Activity要展示后台返回的html文本，网上找了下相关方法并测试可行，不久就发现了新问题，显示的图片太小了，并且比例不协调。最后经过一番折腾解决了…</p></blockquote><a id="more"></a><h1 id="后台返回的html数据"><a href="#后台返回的html数据" class="headerlink" title="后台返回的html数据"></a>后台返回的html数据</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;p style=&quot;text-align: center;&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;http://cdn.image.51-ck.com/forum%2F3be4a7f53bc44e43830667ff206e936f&quot; alt=&quot;三重礼.jpg&quot;&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;p style=&quot;text-align: center;&quot;&gt;百日创客培养计划开始啦！&lt;/p&gt;</span><br><span class="line">&lt;p style=&quot;text-align: center;&quot;&gt;活动期间，登录平台完善用户信息，并充值100元以上，即可参与“百日创客培养计划”&lt;/p&gt;</span><br><span class="line">&lt;p style=&quot;text-align: center;&quot;&gt;我们为你精心准备了创客3重礼&lt;/p&gt;</span><br><span class="line">&lt;p style=&quot;text-align: center;&quot;&gt;一重礼 创客幸运礼：</span><br><span class="line">    &lt;span&gt;活动结束后，每个地区的线下体验中心将组织抽奖活动，从该地区所有参加活动的用户中分别抽取一等奖、二等奖、三等奖！&lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;p style=&quot;text-align: center;&quot;&gt;</span><br><span class="line">    &lt;span&gt;二重礼 创客成长礼：&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;活动结束后，平台将会在每所学校中抽取1名用户，授予“&lt;/span&gt;</span><br><span class="line">    &lt;span lang=&quot;EN-US&quot;&gt;3D&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;创客大使”称号，将有机会以学校创客代表的身份参加51-创客平台及学校举办的多项活动&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;，丰富您的创客经历！&lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;p style=&quot;text-align: center;&quot;&gt;</span><br><span class="line">    &lt;span&gt;三重礼 创客打印礼：充多少送多少，每天发放充值金额1%作为激励基金，持续100天，为您的创作打印提供坚定力量！&lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;p style=&quot;text-align: center;&quot;&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;p style=&quot;text-align: center;&quot;&gt;活动辣么劲爆！！！还不赶快来参与，活动地址：</span><br><span class="line">    &lt;b&gt;</span><br><span class="line">        &lt;u&gt;</span><br><span class="line">            &lt;a target=&quot;_blank&quot; href=&quot;http://www.51-ck.com/pc_activity/topUp&quot;&gt;点我就可以啦~&lt;/a&gt;</span><br><span class="line">        &lt;/u&gt;</span><br><span class="line">    &lt;/b&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><h1 id="解析html的方法"><a href="#解析html的方法" class="headerlink" title="解析html的方法"></a>解析html的方法</h1><ul><li>因为html文本数据量大，需要开启一个子线程来执行该操作</li><li>htmlContent即为传入的html数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public void htmlWebPic(final String htmlContent) &#123;</span><br><span class="line">        Thread t = new Thread(new Runnable() &#123;</span><br><span class="line">            Message msg = handler.obtainMessage();</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                Html.ImageGetter imageGetter = new Html.ImageGetter() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public Drawable getDrawable(String source) &#123;</span><br><span class="line">                        URL url = null;</span><br><span class="line">                        Drawable drawable = null;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            url = new URL(source);</span><br><span class="line">                            drawable = Drawable.createFromStream(url.openStream(), null);</span><br><span class="line"></span><br><span class="line">                            WindowManager wm = (WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">                            int width = wm.getDefaultDisplay().getWidth();</span><br><span class="line">                            int intrinsicWidth = drawable.getIntrinsicWidth();</span><br><span class="line">                            int intrinsicHeight = drawable.getIntrinsicHeight();</span><br><span class="line">                            if (intrinsicWidth &lt; 10) &#123;</span><br><span class="line">                                drawable.setBounds(0, 0, 50, 50);</span><br><span class="line">                            &#125; else &#123;</span><br><span class="line">                                int height = (width * intrinsicHeight) / intrinsicWidth;</span><br><span class="line">                                drawable.setBounds(0, 0, width, height);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125; catch (MalformedURLException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125; catch (IOException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        return drawable;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                CharSequence result = Html.fromHtml(htmlContent, imageGetter, null);</span><br><span class="line">                msg.what = 0x12;</span><br><span class="line">                msg.obj = result;</span><br><span class="line">                handler.sendMessage(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="在UI线程中接收处理好的数据并显示"><a href="#在UI线程中接收处理好的数据并显示" class="headerlink" title="在UI线程中接收处理好的数据并显示"></a>在UI线程中接收处理好的数据并显示</h1><ul><li>tvContent即为要显现该html的TextView控件名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private Handler handler = new Handler(new Handler.Callback() &#123;</span><br><span class="line">     @Override</span><br><span class="line">     public boolean handleMessage(Message msg) &#123;</span><br><span class="line">         if (msg.what == 0x12) &#123;</span><br><span class="line">             tvContent.setText((CharSequence) msg.obj);</span><br><span class="line">             tvContent.setMovementMethod(LinkMovementMethod.getInstance());</span><br><span class="line">         &#125;</span><br><span class="line">         return false;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><h1 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h1><h2 id="解析html中的图片用到的方法，并得到该图片的drawable"><a href="#解析html中的图片用到的方法，并得到该图片的drawable" class="headerlink" title="解析html中的图片用到的方法，并得到该图片的drawable :"></a>解析html中的图片用到的方法，并得到该图片的drawable :</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Drawable drawable = Drawable.createFromStream(url.openStream(), null);</span><br></pre></td></tr></table></figure><h2 id="获取手机屏幕的宽度width"><a href="#获取手机屏幕的宽度width" class="headerlink" title="获取手机屏幕的宽度width"></a>获取手机屏幕的宽度width</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WindowManager wm = (WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">int width = wm.getDefaultDisplay().getWidth();</span><br></pre></td></tr></table></figure><h2 id="得到html中当前图片的宽和高"><a href="#得到html中当前图片的宽和高" class="headerlink" title="得到html中当前图片的宽和高"></a>得到html中当前图片的宽和高</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int intrinsicWidth = drawable.getIntrinsicWidth();</span><br><span class="line">int intrinsicHeight = drawable.getIntrinsicHeight();</span><br></pre></td></tr></table></figure><h2 id="过滤是否是表情符"><a href="#过滤是否是表情符" class="headerlink" title="过滤是否是表情符"></a>过滤是否是表情符</h2><blockquote><p>经测试，当图片的宽小于10的时候，多半都是表情符，所以增加一个判断是否是表情符，并将该表情符的宽高均设置为50</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (intrinsicWidth &lt; 10) &#123;</span><br><span class="line"> drawable.setBounds(0, 0, 50, 50);</span><br><span class="line">&#125; else &#123;</span><br><span class="line"> //(略)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对图片进行比例设置"><a href="#对图片进行比例设置" class="headerlink" title="对图片进行比例设置"></a>对图片进行比例设置</h2><ul><li>让图片的宽和手机屏幕一致</li><li>$\frac{intrinsicHeight}{intrinsicWidth}$得出一个单位的intrinsicWidth需要多少个单位的intrinsicHeight</li><li>因为让图片的宽和手机屏幕一致，即有intrinsicWidth*width单位的宽</li><li>即图片实际高度为$\frac{intrinsicHeight}{intrinsicWidth}*width$</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">if (intrinsicWidth &lt; 10) &#123;</span><br><span class="line">//(略)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">int height = (width * intrinsicHeight) / intrinsicWidth;</span><br><span class="line">drawable.setBounds(0, 0, width, height);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> TextView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android开发中的一些小技巧</title>
      <link href="/2018/07/24/Android%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <content type="html"><![CDATA[<blockquote><p>日常开发过程中常用到的一些方法或属性</p></blockquote><a id="more"></a><h1 id="去掉Android5-0以后button自带阴影效果"><a href="#去掉Android5-0以后button自带阴影效果" class="headerlink" title="去掉Android5.0以后button自带阴影效果"></a>去掉Android5.0以后button自带阴影效果</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">style=&quot;?android:attr/borderlessButtonStyle&quot;</span><br></pre></td></tr></table></figure><h1 id="改变editttext光标的颜色"><a href="#改变editttext光标的颜色" class="headerlink" title="改变editttext光标的颜色"></a>改变editttext光标的颜色</h1><ul><li>在资源文件drawable文件夹下新建一个光标控件color_cursor.xml</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;rectangle&quot;&gt;</span><br><span class="line">    &lt;size android:width=&quot;1dp&quot; /&gt;</span><br><span class="line">    &lt;solid android:color=&quot;#008000&quot;  /&gt;</span><br><span class="line">&lt;/shape&gt;</span><br></pre></td></tr></table></figure><ul><li>设置EditText:android:textCursorDrawable=”@drawable/color_cursor”</li></ul><h1 id="取消listview点击的背景颜色"><a href="#取消listview点击的背景颜色" class="headerlink" title="取消listview点击的背景颜色"></a>取消listview点击的背景颜色</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:listSelector=&quot;#00000000&quot;</span><br></pre></td></tr></table></figure><h1 id="一个简单的json格式文件"><a href="#一个简单的json格式文件" class="headerlink" title="一个简单的json格式文件"></a>一个简单的json格式文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;张三&quot;,</span><br><span class="line">    &quot;job&quot;: &quot;总经理&quot;,</span><br><span class="line">    &quot;phone&quot;: &quot;13987654321&quot;,</span><br><span class="line">    &quot;email&quot;: &quot;13245@163.com&quot;,</span><br><span class="line">    &quot;Companyname&quot;: &quot;杭州阿狸科技有限公司&quot;,</span><br><span class="line">    &quot;commpanyaddress&quot;: &quot;杭州市西湖区&quot;,</span><br><span class="line">    &quot;industry&quot;: &quot;IT软件&quot;,</span><br><span class="line">    &quot;hobby&quot;: &quot;爬山&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取屏幕状态栏的高度的方法"><a href="#获取屏幕状态栏的高度的方法" class="headerlink" title="获取屏幕状态栏的高度的方法"></a>获取屏幕状态栏的高度的方法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   public void onWindowFocusChanged(boolean hasFocus) &#123;</span><br><span class="line">       super.onWindowFocusChanged(hasFocus);</span><br><span class="line">       Rect frame = new Rect();</span><br><span class="line">       getWindow().getDecorView().getWindowVisibleDisplayFrame(frame);</span><br><span class="line">       // 状态栏高度</span><br><span class="line">       statusBarHeight = frame.top;</span><br><span class="line">       View v = getWindow().findViewById(Window.ID_ANDROID_CONTENT);</span><br><span class="line">       int contentTop = v.getTop();</span><br><span class="line">       // statusBarHeight是上面所求的状态栏的高度</span><br><span class="line">       int titleBarHeight = contentTop - statusBarHeight;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="将dp转换为像素的方法"><a href="#将dp转换为像素的方法" class="headerlink" title="将dp转换为像素的方法"></a>将dp转换为像素的方法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static int dip2px(Context context, float dpValue) &#123;</span><br><span class="line">       final float scale = context.getResources().getDisplayMetrics().density;</span><br><span class="line">       return (int) (dpValue * scale + 0.5f);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="解决-在scrollview与嵌套listview的页面中-一进入不是最上面-在最外层布局添加该属性"><a href="#解决-在scrollview与嵌套listview的页面中-一进入不是最上面-在最外层布局添加该属性" class="headerlink" title="解决 在scrollview与嵌套listview的页面中 一进入不是最上面 在最外层布局添加该属性"></a>解决 在scrollview与嵌套listview的页面中 一进入不是最上面 在最外层布局添加该属性</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">android:descendantFocusability=&quot;blocksDescendants&quot;</span><br></pre></td></tr></table></figure><h1 id="解决ScorllView嵌套ListView只显示一行的问题-注意：该方法调用要“listview-setAdapter-适配器-”之后"><a href="#解决ScorllView嵌套ListView只显示一行的问题-注意：该方法调用要“listview-setAdapter-适配器-”之后" class="headerlink" title="解决ScorllView嵌套ListView只显示一行的问题(注意：该方法调用要“listview.setAdapter(适配器)”之后)"></a>解决ScorllView嵌套ListView只显示一行的问题(注意：该方法调用要“listview.setAdapter(适配器)”之后)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public void setListViewHeightBasedOnChildren(ListView listView) &#123;</span><br><span class="line">       ListAdapter listAdapter = listView.getAdapter();</span><br><span class="line">       if (listAdapter == null) &#123;</span><br><span class="line">           return;</span><br><span class="line">       &#125;</span><br><span class="line">       int totalHeight = 0;</span><br><span class="line">       for (int i = 0; i &lt; listAdapter.getCount(); i++) &#123;</span><br><span class="line">           View listItem = listAdapter.getView(i, null, listView);</span><br><span class="line">           listItem.measure(0, 0);</span><br><span class="line">           totalHeight += listItem.getMeasuredHeight();</span><br><span class="line">       &#125;</span><br><span class="line">       ViewGroup.LayoutParams params = listView.getLayoutParams();</span><br><span class="line">       params.height = totalHeight + (listView.getDividerHeight() * (listAdapter.getCount() - 1));</span><br><span class="line">       listView.setLayoutParams(params);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="去掉edittext的获取焦点（禁止已进入有edittext的activity中-自动弹出输入法）"><a href="#去掉edittext的获取焦点（禁止已进入有edittext的activity中-自动弹出输入法）" class="headerlink" title="去掉edittext的获取焦点（禁止已进入有edittext的activity中 自动弹出输入法）"></a>去掉edittext的获取焦点（禁止已进入有edittext的activity中 自动弹出输入法）</h1><ul><li>在最外层布局中加上</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android:focusable=&quot;true&quot;     </span><br><span class="line">android:focusableInTouchMode=&quot;true&quot;</span><br></pre></td></tr></table></figure><h1 id="解决-listview的item的长按监听与点击监听的冲突"><a href="#解决-listview的item的长按监听与点击监听的冲突" class="headerlink" title="解决 listview的item的长按监听与点击监听的冲突"></a>解决 listview的item的长按监听与点击监听的冲突</h1><ul><li>listveiew 的长按监听事件返回值有false 改为true</li></ul><h1 id="将bitmap转化为二进制流"><a href="#将bitmap转化为二进制流" class="headerlink" title="将bitmap转化为二进制流"></a>将bitmap转化为二进制流</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public byte[] getBitmapByte(Bitmap bitmap)&#123;</span><br><span class="line">       ByteArrayOutputStream out = new ByteArrayOutputStream();</span><br><span class="line">       bitmap.compress(Bitmap.CompressFormat.JPEG, 100, out);</span><br><span class="line">       try &#123;</span><br><span class="line">           out.flush();</span><br><span class="line">           out.close();</span><br><span class="line">       &#125; catch (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       return out.toByteArray();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="图片转成string"><a href="#图片转成string" class="headerlink" title="图片转成string"></a>图片转成string</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static String convertIconToString(Bitmap bitmap)  </span><br><span class="line">    &#123;  </span><br><span class="line">        ByteArrayOutputStream baos = new ByteArrayOutputStream();// outputstream  </span><br><span class="line">        bitmap.compress(CompressFormat.PNG, 100, baos);  </span><br><span class="line">        byte[] appicon = baos.toByteArray();// 转为byte数组  </span><br><span class="line">        return Base64.encodeToString(appicon, Base64.DEFAULT);  </span><br><span class="line">  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="string转成bitmap"><a href="#string转成bitmap" class="headerlink" title="string转成bitmap"></a>string转成bitmap</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static Bitmap convertStringToIcon(String st)  </span><br><span class="line">    &#123;  </span><br><span class="line">        // OutputStream out;  </span><br><span class="line">        Bitmap bitmap = null;  </span><br><span class="line">        try  </span><br><span class="line">        &#123;  </span><br><span class="line">            // out = new FileOutputStream(&quot;/sdcard/aa.jpg&quot;);  </span><br><span class="line">            byte[] bitmapArray;  </span><br><span class="line">            bitmapArray = Base64.decode(st, Base64.DEFAULT);  </span><br><span class="line">            bitmap =  </span><br><span class="line">                    BitmapFactory.decodeByteArray(bitmapArray, 0,  </span><br><span class="line">                            bitmapArray.length);  </span><br><span class="line">            // bitmap.compress(Bitmap.CompressFormat.PNG, 100, out);  </span><br><span class="line">            return bitmap;  </span><br><span class="line">        &#125;  </span><br><span class="line">        catch (Exception e)  </span><br><span class="line">        &#123;  </span><br><span class="line">            return null;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="将dp转换为像素的方法-1"><a href="#将dp转换为像素的方法-1" class="headerlink" title="将dp转换为像素的方法"></a>将dp转换为像素的方法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static int dip2px(Context context, float dpValue) &#123;</span><br><span class="line">       final float scale = context.getResources().getDisplayMetrics().density;</span><br><span class="line">       return (int) (dpValue * scale + 0.5f);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="返回按钮的监听事件"><a href="#返回按钮的监听事件" class="headerlink" title="返回按钮的监听事件"></a>返回按钮的监听事件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Override</span><br><span class="line">    public boolean onKeyDown(int keyCode, KeyEvent event) &#123;</span><br><span class="line">        if (keyCode == KeyEvent.KEYCODE_BACK &amp;&amp; event.getRepeatCount() == 0) &#123;</span><br><span class="line">     </span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="生成随机数字和字母"><a href="#生成随机数字和字母" class="headerlink" title="生成随机数字和字母"></a>生成随机数字和字母</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static String getStringRandom(int length) &#123;  </span><br><span class="line">          </span><br><span class="line">        String val = &quot;&quot;;  </span><br><span class="line">        Random random = new Random();  </span><br><span class="line">          </span><br><span class="line">        //参数length，表示生成几位随机数  </span><br><span class="line">        for(int i = 0; i &lt; length; i++) &#123;  </span><br><span class="line">              </span><br><span class="line">            String charOrNum = random.nextInt(2) % 2 == 0 ? &quot;char&quot; : &quot;num&quot;;  </span><br><span class="line">            //输出字母还是数字  </span><br><span class="line">            if( &quot;char&quot;.equalsIgnoreCase(charOrNum) ) &#123;  </span><br><span class="line">                //输出是大写字母还是小写字母  </span><br><span class="line">                int temp = random.nextInt(2) % 2 == 0 ? 65 : 97;  </span><br><span class="line">                val += (char)(random.nextInt(26) + temp);  </span><br><span class="line">            &#125; else if( &quot;num&quot;.equalsIgnoreCase(charOrNum) ) &#123;  </span><br><span class="line">                val += String.valueOf(random.nextInt(10));  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        return val;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="将bitmap转换为-png格式的图片"><a href="#将bitmap转换为-png格式的图片" class="headerlink" title="将bitmap转换为.png格式的图片"></a>将bitmap转换为.png格式的图片</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static void savePNG_After(Bitmap bitmap, String name) &#123;</span><br><span class="line">        File file = new File(name);</span><br><span class="line">        try &#123;</span><br><span class="line">            FileOutputStream out = new FileOutputStream(file);</span><br><span class="line">            if (bitmap.compress(Bitmap.CompressFormat.PNG, 30, out)) &#123;</span><br><span class="line">                out.flush();</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="将dp转换为像素的方法-2"><a href="#将dp转换为像素的方法-2" class="headerlink" title="将dp转换为像素的方法"></a>将dp转换为像素的方法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static int dip2px(Context context, float dpValue) &#123;</span><br><span class="line">        final float scale = context.getResources().getDisplayMetrics().density;</span><br><span class="line">        return (int) (dpValue * scale + 0.5f);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static void delFile(String fileName)&#123;</span><br><span class="line">        File file = new File(&quot;sdcard/&quot; + fileName);</span><br><span class="line">        if(file.isFile())&#123;</span><br><span class="line">            file.delete();</span><br><span class="line">        &#125;</span><br><span class="line">        file.exists();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="判断当前指定路径中的指定某个文件是否存在的方法"><a href="#判断当前指定路径中的指定某个文件是否存在的方法" class="headerlink" title="判断当前指定路径中的指定某个文件是否存在的方法"></a>判断当前指定路径中的指定某个文件是否存在的方法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public boolean fileIsExists()&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            File f=new File(&quot;storage/emulated/0/bluetooth/baojia.xls&quot;);</span><br><span class="line">            if(!f.exists())&#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;catch (Exception e) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="将从list集合中获得的数据以逗号拼接字符串"><a href="#将从list集合中获得的数据以逗号拼接字符串" class="headerlink" title="将从list集合中获得的数据以逗号拼接字符串"></a>将从list集合中获得的数据以逗号拼接字符串</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public String ListToString(List&lt;String&gt; tempSelcetGoodsList) &#123;</span><br><span class="line">        if (tempSelcetGoodsList == null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        boolean flag = false;</span><br><span class="line">        for (String string : tempSelcetGoodsList) &#123;</span><br><span class="line">            if (flag) &#123;</span><br><span class="line">                sb.append(&quot;，&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                flag = true;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(string);</span><br><span class="line">        &#125;</span><br><span class="line">        return sb.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="将以逗号拼接的字符串，以逗号切割-并加到List集合中"><a href="#将以逗号拼接的字符串，以逗号切割-并加到List集合中" class="headerlink" title="将以逗号拼接的字符串，以逗号切割 并加到List集合中"></a>将以逗号拼接的字符串，以逗号切割 并加到List集合中</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String str=&quot;a,b,c,d&quot;;</span><br><span class="line"></span><br><span class="line">String strs[] = str.split(&quot;,&quot;);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; strList = Arrays.asList(strs);</span><br></pre></td></tr></table></figure><h1 id="可以让textView上的字可以被选中-复制-等操作"><a href="#可以让textView上的字可以被选中-复制-等操作" class="headerlink" title="可以让textView上的字可以被选中 复制 等操作"></a>可以让textView上的字可以被选中 复制 等操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:textIsSelectable=&quot;true&quot;</span><br></pre></td></tr></table></figure><h1 id="JAVA截取字符串后几位"><a href="#JAVA截取字符串后几位" class="headerlink" title="JAVA截取字符串后几位"></a>JAVA截取字符串后几位</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">String str = &quot;1234567890111&quot;;</span><br><span class="line">int n = 4;</span><br><span class="line">System.out.println(str.substring(str.length()-n));</span><br></pre></td></tr></table></figure><h1 id="EditText多行输入"><a href="#EditText多行输入" class="headerlink" title="EditText多行输入"></a>EditText多行输入</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android:inputType=&quot;textMultiLine&quot;//可以显示多行</span><br><span class="line">android:gravity=&quot;left|top&quot;//输入时光标左上角</span><br><span class="line">android:minLines=&quot;6&quot; //最小显示6行</span><br></pre></td></tr></table></figure><h1 id="Activity去掉状态栏"><a href="#Activity去掉状态栏" class="headerlink" title="Activity去掉状态栏"></a>Activity去掉状态栏</h1><ul><li>在styles.xml文件中添加样式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;style name=&quot;AppTheme.NoBar&quot;&gt;  </span><br><span class="line">        &lt;item name=&quot;windowNoTitle&quot;&gt;true&lt;/item&gt;  </span><br><span class="line">        &lt;item name=&quot;android:windowFullscreen&quot;&gt;true&lt;/item&gt;  </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>在需要去掉状态栏的acitivity的Manifest文件中添加</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:theme=&quot;@style/AppTheme.NoBar&quot;</span><br></pre></td></tr></table></figure><ul><li>Glide加载时等比例缩放图片至屏幕宽度<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(activity).load(yourUrl).asBitmap().into(new SimpleTarget&lt;Bitmap&gt;(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL) &#123;  </span><br><span class="line">                    @Override  </span><br><span class="line">                    public void onResourceReady(Bitmap resource, GlideAnimation&lt;? super Bitmap&gt; glideAnimation) &#123;  </span><br><span class="line">                        int imageWidth = resource.getWidth();  </span><br><span class="line">                        int imageHeight = resource.getHeight();  </span><br><span class="line">                        int height = ScreenUtils.getScreenWidth() * imageHeight / imageWidth;  </span><br><span class="line">                        ViewGroup.LayoutParams para = imageView.getLayoutParams();  </span><br><span class="line">                        para.height = height;  </span><br><span class="line">                        para.width = ScreenUtils.getScreenWidth();  </span><br><span class="line">                        imageView.setImageBitmap(resource);  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TextView中部分文本点击可跳转</title>
      <link href="/2018/07/24/TextView%E4%B8%AD%E9%83%A8%E5%88%86%E6%96%87%E6%9C%AC%E7%82%B9%E5%87%BB%E5%8F%AF%E8%B7%B3%E8%BD%AC/"/>
      <content type="html"><![CDATA[<blockquote><p>以前在项目中遇到了一个需求就是，在一段文段的最后加上“查看图片”四个字，并点击该字可以进行查看图片的相应操作，解决方案如下…</p></blockquote><a id="more"></a><h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p><img src="http://p9uaajhtk.bkt.clouddn.com/textView.png" alt="textView"></p><h1 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h1><ul><li>s1为从后台获取的数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String s1 = bean.getContent();</span><br><span class="line">final String content = s1 + &quot;查看图片&gt;&quot;;</span><br><span class="line">Spannable spannable = Spannable.Factory.getInstance().newSpannable(content);</span><br><span class="line">          spannable.setSpan(new ClickableSpan() &#123;</span><br><span class="line">          @Override</span><br><span class="line">          public void onClick(View widget) &#123;</span><br><span class="line">              //相关跳转操作</span><br><span class="line">             &#125;</span><br><span class="line">    &#125;, content.length() - 5, content.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">tvText.setText(spannable);</span><br><span class="line">tvText.setMovementMethod(LinkMovementMethod.getInstance());</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> Android </tag>
            
            <tag> TextView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>json数据转换成数组</title>
      <link href="/2018/07/24/json%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E6%88%90%E6%95%B0%E7%BB%84/"/>
      <content type="html"><![CDATA[<blockquote><p>最近在优化项目，之前是手写的popupWindow弹框，不是特别美观，看到了别人写的更好的，想拿来用，于是问题来了，他接收的数据是数组类型，有一维数组和二维数组，而公司项目后台是返回的json格式的数据，怎么将json格式转换成他要的数组呢？最后经过一番折腾，解决了…</p></blockquote><a id="more"></a><h1 id="后台返回的json数据"><a href="#后台返回的json数据" class="headerlink" title="后台返回的json数据"></a>后台返回的json数据</h1><ul><li>如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;head&quot;: &#123;</span><br><span class="line">&quot;respCode&quot;: &quot;0000000&quot;,</span><br><span class="line">&quot;respContent&quot;: &quot;执行成功&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;body&quot;: &#123;</span><br><span class="line">&quot;sortList&quot;: [&#123;</span><br><span class="line">&quot;name&quot;: &quot;最新&quot;,</span><br><span class="line">&quot;value&quot;: 1</span><br><span class="line">&#125;, &#123;</span><br><span class="line">&quot;name&quot;: &quot;点赞&quot;,</span><br><span class="line">&quot;value&quot;: 2</span><br><span class="line">&#125;, &#123;</span><br><span class="line">&quot;name&quot;: &quot;销量&quot;,</span><br><span class="line">&quot;value&quot;: 3</span><br><span class="line">&#125;, &#123;</span><br><span class="line">&quot;name&quot;: &quot;热度&quot;,</span><br><span class="line">&quot;value&quot;: 4</span><br><span class="line">&#125;],</span><br><span class="line">&quot;bigCategorys&quot;: [&#123;</span><br><span class="line">&quot;smallCategorys&quot;: [&#123;</span><br><span class="line">&quot;id&quot;: &quot;196B759A8E2B11E7AB4600163E0EB16B&quot;,</span><br><span class="line">&quot;name&quot;: &quot;动物模型&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">&quot;id&quot;: &quot;1F2FCFD18E2B11E7AB4600163E0EB16B&quot;,</span><br><span class="line">&quot;name&quot;: &quot;植物模型&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">&quot;id&quot;: &quot;2DADE1FF8E2B11E7AB4600163E0EB16B&quot;,</span><br><span class="line">&quot;name&quot;: &quot;飞禽&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">&quot;id&quot;: &quot;3300833A8E2B11E7AB4600163E0EB16B&quot;,</span><br><span class="line">&quot;name&quot;: &quot;奇异生物&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">&quot;id&quot;: &quot;E827044F8E2B11E7AB4600163E0EB16B&quot;,</span><br><span class="line">&quot;name&quot;: &quot;水生生物&quot;</span><br><span class="line">&#125;],</span><br><span class="line">&quot;name&quot;: &quot;动物植物&quot;,</span><br><span class="line">&quot;id&quot;: &quot;E3BAF9708E2A11E7AB4600163E0EB16B&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">&quot;smallCategorys&quot;: [&#123;</span><br><span class="line">&quot;id&quot;: &quot;4A21F21A8E2B11E7AB4600163E0EB16B&quot;,</span><br><span class="line">&quot;name&quot;: &quot;办公工具&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">&quot;id&quot;: &quot;156AC3D98E3111E7AB4600163E0EB16B&quot;,</span><br><span class="line">&quot;name&quot;: &quot;机械工具&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">&quot;id&quot;: &quot;1B02B2EF8E3111E7AB4600163E0EB16B&quot;,</span><br><span class="line">&quot;name&quot;: &quot;手工工具&quot;</span><br><span class="line">&#125;],</span><br><span class="line">&quot;name&quot;: &quot;工具用具&quot;,</span><br><span class="line">&quot;id&quot;: &quot;F0A71C2A8E2A11E7AB4600163E0EB16B&quot;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="通过GsonFromt生成一个名为DesignClassBean的类"><a href="#通过GsonFromt生成一个名为DesignClassBean的类" class="headerlink" title="通过GsonFromt生成一个名为DesignClassBean的类"></a>通过GsonFromt生成一个名为DesignClassBean的类</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DesignClassBean designClassBean = new Gson().fromJson(response, DesignClassBean.class);</span><br></pre></td></tr></table></figure><h1 id="将Json数据转换成一维数组"><a href="#将Json数据转换成一维数组" class="headerlink" title="将Json数据转换成一维数组"></a>将Json数据转换成一维数组</h1><ul><li><p>一维数组的list集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;DesignClassBean.BodyBean.SortListBean&gt; oneList = designClassBean.getBody().getSortList();</span><br></pre></td></tr></table></figure></li><li><p>创建一个ArrayList集合，并遍历得到其中的name字段值，并加到ArrayList集合中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; oneArrayList = new ArrayList&lt;String&gt;();</span><br><span class="line">for (int i = 0; i &lt; oneList.size(); i++) &#123;</span><br><span class="line">     String name = oneList.get(i).getName();</span><br><span class="line">     oneArrayList.add(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将ArrayList集合转换成一维数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[] oneArrays = oneArrayList.toArray(new String[oneArrayList.size()]);</span><br></pre></td></tr></table></figure></li><li><p>即oneArrays就是我们要得到的一维数组</p></li></ul><h1 id="将Json数据转换成二维数组"><a href="#将Json数据转换成二维数组" class="headerlink" title="将Json数据转换成二维数组"></a>将Json数据转换成二维数组</h1><ul><li><p>二维数组的list集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;DesignClassBean.BodyBean.BigCategorysBean&gt; twoList = designClassBean.getBody().getBigCategorys();</span><br></pre></td></tr></table></figure></li><li><p>创建一个ArrayList集合twoArrayList</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; twoArrayList = new ArrayList&lt;String&gt;();</span><br></pre></td></tr></table></figure></li><li><p>创建一个空二维数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[][] twoArray = new String[twoList.size()][];</span><br></pre></td></tr></table></figure></li><li><p>嵌套for循环将值放入二维数组中</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 0; i &lt; twoList.size(); i++) &#123;</span><br><span class="line">            String name = twoList.get(i).getName();</span><br><span class="line">            twoArrayList.add(name);</span><br><span class="line">            ArrayList&lt;String&gt; threeArrayList = new ArrayList&lt;String&gt;();</span><br><span class="line">            List&lt;DesignClassBean.BodyBean.BigCategorysBean.SmallCategorysBean&gt; smallCategorys = bigCategorys.get(i).getSmallCategorys();</span><br><span class="line">            for (int j = 0; j &lt; smallCategorys.size(); j++) &#123;</span><br><span class="line">                String smallname = smallCategorys.get(j).getName();</span><br><span class="line">                threeArrayList.add(smallname);</span><br><span class="line">            &#125;</span><br><span class="line">            twoArray[i] = threeArrayList.toArray(new String[threeArrayList.size()]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li>twoArray即为我们需要的二维数组</li></ul>]]></content>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> java </tag>
            
            <tag> 数组 </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>未选择的路</title>
      <link href="/2018/07/19/%E6%9C%AA%E9%80%89%E6%8B%A9%E7%9A%84%E8%B7%AF/"/>
      <content type="html"><![CDATA[<p>罗伯特·弗洛斯特<br></p><p>黄色的树林里分出两条路，<br></p><p>可惜我不能同时去涉足， <br></p><p>我向那路口久久伫立，<br><br><a id="more"></a><br>我向着一条路极目望去，<br></p><p>直到它消失在丛林深处。<br></p><p>但我却选了另外一条路，<br></p><p>它荒草萋萋，十分幽寂，<br></p><p>显得更诱人，更美丽；<br></p><p>虽然在这条小路上，<br></p><p>很少留下旅人的足迹。<br></p><p>那天清晨落叶满地，<br></p><p>两条路都未经脚印污染。<br></p><p>啊，留下一条路等改日再见！<br></p><p>但我知道路径延绵无尽头，<br></p><p>恐怕我难以再回返。<br></p><p>也许多少年后在某个地方，<br></p><p>我将轻声叹息将往事回顾：<br></p><p>我将轻声叹息将往事回顾：<br></p><p>一片树林里分出两条路<br></p><p>而我选择了人迹更少的一条，<br></p><p>从此决定了我一生的道路。<br></p>]]></content>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android横竖屏切换时不销毁当前Activity</title>
      <link href="/2018/07/18/Android%E6%A8%AA%E7%AB%96%E5%B1%8F%E5%88%87%E6%8D%A2%E6%97%B6%E4%B8%8D%E9%94%80%E6%AF%81%E5%BD%93%E5%89%8DActivity/"/>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;日常开发中经常会遇到横竖屏切换的问题，一般的做法是让其强制横屏或强制竖屏<br><br><a id="more"></a></p><ul><li>例如 : 强制竖屏<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity</span><br><span class="line">            android:name=&quot;.MainActivity&quot;</span><br><span class="line">            android:screenOrientation=&quot;portrait&quot; /&gt;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;我们知道当横竖屏切换时，会重新执行一遍生命周期的方法，所以导致了每当横竖屏切换的时候当前页面被销毁，那有没有在既可以横竖屏切换又不销毁当前Activity的方法呢？答案是肯定的，在网上找了下，并亲测可行的方法，很简单如下 :<br></p><ul><li>同样是在Manifest.xml中在对应的Activity中添加 <code>android:configChanges=&quot;orientation|keyboardHidden&quot;</code>属性<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity</span><br><span class="line">            android:name=&quot;.MainActivity&quot;</span><br><span class="line">            android:configChanges=&quot;orientation|keyboardHidden /&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> Android </tag>
            
            <tag> 基础 </tag>
            
            <tag> 横竖屏切换 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WebView小结</title>
      <link href="/2018/07/13/WebView%E5%B0%8F%E7%BB%93/"/>
      <content type="html"><![CDATA[<blockquote><p>Android日常开发中一些业务经常是嵌套Web端页面来实现，就是我们日常用到的WebView,WebView加载前端开发人员写好的页面的URL。下面是工作过程中遇到过的一些问题以及解决办法。</p></blockquote><a id="more"></a><h1 id="WebView小结"><a href="#WebView小结" class="headerlink" title="WebView小结"></a>WebView小结</h1><h2 id="Android5-0以后的手机点击Web页面无法拍照或选择图片？"><a href="#Android5-0以后的手机点击Web页面无法拍照或选择图片？" class="headerlink" title="Android5.0以后的手机点击Web页面无法拍照或选择图片？"></a>Android5.0以后的手机点击Web页面无法拍照或选择图片？</h2><ul><li><p>针对Android版本号，重写onShowFileChooser方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">webview.setWebChromeClient(new WebChromeClient() &#123;</span><br><span class="line"></span><br><span class="line">           // For Android &lt; 3.0</span><br><span class="line">           public void openFileChooser(ValueCallback&lt;Uri&gt; valueCallback) &#123;</span><br><span class="line">               uploadMessage = valueCallback;</span><br><span class="line">               openImageChooserActivity();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           // For Android  &gt;= 3.0</span><br><span class="line">           public void openFileChooser(ValueCallback valueCallback, String acceptType) &#123;</span><br><span class="line">               uploadMessage = valueCallback;</span><br><span class="line">               openImageChooserActivity();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           //For Android  &gt;= 4.1</span><br><span class="line">           @Override</span><br><span class="line">           public void openFileChooser(ValueCallback&lt;Uri&gt; valueCallback, String acceptType, </span><br><span class="line">           String capture) &#123;</span><br><span class="line">               uploadMessage = valueCallback;</span><br><span class="line">               openImageChooserActivity();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           // For Android &gt;= 5.0</span><br><span class="line">           @Override</span><br><span class="line">           public boolean onShowFileChooser(WebView webView, ValueCallback&lt;Uri[]&gt;    filePathCallback, WebChromeClient.FileChooserParams fileChooserParams) &#123;</span><br><span class="line">               uploadMessageAboveL = filePathCallback;</span><br><span class="line">               openImageChooserActivity();</span><br><span class="line">               return true;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure></li><li><p>openImageChooserActivity方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private void openImageChooserActivity() &#123;</span><br><span class="line">    Intent i = new Intent(Intent.ACTION_GET_CONTENT);</span><br><span class="line">    i.addCategory(Intent.CATEGORY_OPENABLE);</span><br><span class="line">    i.setType(&quot;image/*&quot;);</span><br><span class="line">    startActivityForResult(Intent.createChooser(i, &quot;Image Chooser&quot;), FILE_CHOOSER_RESULT_CODE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>onActivityResult方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</span><br><span class="line">    super.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">    if (requestCode == FILE_CHOOSER_RESULT_CODE) &#123;</span><br><span class="line">        if (null == uploadMessage &amp;&amp; null == uploadMessageAboveL) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        Uri result = data == null || resultCode != RESULT_OK ? null : data.getData();</span><br><span class="line">        if (uploadMessageAboveL != null) &#123;</span><br><span class="line">            onActivityResultAboveL(requestCode, resultCode, data);</span><br><span class="line">        &#125; else if (uploadMessage != null) &#123;</span><br><span class="line">            uploadMessage.onReceiveValue(result);</span><br><span class="line">            uploadMessage = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>onActivityResultAboveL方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@TargetApi(Build.VERSION_CODES.LOLLIPOP)</span><br><span class="line">private void onActivityResultAboveL(int requestCode, int resultCode, Intent intent) &#123;</span><br><span class="line">    if (requestCode != FILE_CHOOSER_RESULT_CODE || uploadMessageAboveL == null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    Uri[] results = null;</span><br><span class="line">    if (resultCode == Activity.RESULT_OK) &#123;</span><br><span class="line">        if (intent != null) &#123;</span><br><span class="line">            String dataString = intent.getDataString();</span><br><span class="line">            ClipData clipData = intent.getClipData();</span><br><span class="line">            if (clipData != null) &#123;</span><br><span class="line">                results = new Uri[clipData.getItemCount()];</span><br><span class="line">                for (int i = 0; i &lt; clipData.getItemCount(); i++) &#123;</span><br><span class="line">                    ClipData.Item item = clipData.getItemAt(i);</span><br><span class="line">                    results[i] = item.getUri();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (dataString != null) &#123;</span><br><span class="line">                results = new Uri[]&#123;Uri.parse(dataString)&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    uploadMessageAboveL.onReceiveValue(results);</span><br><span class="line">    uploadMessageAboveL = null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="当前WebView页面的Activity中，点击跳转了多个Web页面，而点击返回，一次返回，而不是一层一层的返回？"><a href="#当前WebView页面的Activity中，点击跳转了多个Web页面，而点击返回，一次返回，而不是一层一层的返回？" class="headerlink" title="当前WebView页面的Activity中，点击跳转了多个Web页面，而点击返回，一次返回，而不是一层一层的返回？"></a>当前WebView页面的Activity中，点击跳转了多个Web页面，而点击返回，一次返回，而不是一层一层的返回？</h2><ul><li>解决办法 webView.goBack()</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override  </span><br><span class="line">public boolean onKeyDown(int keyCode, KeyEvent event) &#123;  </span><br><span class="line">    if(keyCode == KeyEvent.KEYCODE_BACK&amp;&amp;webView.canGoBack())&#123;  </span><br><span class="line">        webView.goBack();//返回上个页面  </span><br><span class="line">        return true;  </span><br><span class="line">    &#125;  </span><br><span class="line">    return super.onKeyDown(keyCode, event);//退出整个应用程序  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取当前Web页面中的标题"><a href="#获取当前Web页面中的标题" class="headerlink" title="获取当前Web页面中的标题"></a>获取当前Web页面中的标题</h2><ul><li>getTitle()方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">WebView mWebView = (WebView) findViewById(R.id.mwebview);</span><br><span class="line">   mWebView.setWebViewClient(new WebViewClient() &#123; </span><br><span class="line">       @Override </span><br><span class="line">       public void onPageFinished(WebView view, String url) &#123;</span><br><span class="line">           //tvTitle为原生标题栏的标题控件</span><br><span class="line">           tvTitle.setTitle(view.getTitle());</span><br><span class="line">       &#125; </span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="视频无法全屏播放"><a href="#视频无法全屏播放" class="headerlink" title="视频无法全屏播放"></a>视频无法全屏播放</h2><ul><li>在Manifest清单文件中，对应的Activity中添加</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:configChanges=&quot;orientation|screenSize|keyboardHidden&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> Android </tag>
            
            <tag> 基础 </tag>
            
            <tag> WebView相关 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记一次Android8.0安装更新遇到的坑</title>
      <link href="/2018/07/02/%E8%AE%B0%E4%B8%80%E6%AC%A1Android8-0%E5%AE%89%E8%A3%85%E6%9B%B4%E6%96%B0%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;公司的项目最近上线了一个活动，为提高参与度，需要推送到旧版本用户上提示更新。于是在测试服务器上先例常测试，却发现有的手机可以正常下载并跳转安装apk页面安装，有的手机却不行，下载成功后，一闪而过，也没有log报错日志，奇怪了，这部分更新的代码没有更新过啊？什么原因呢？<br></p><a id="more"></a><p>&nbsp;&nbsp;经分析，发现都是Android8.0的机型出了问题，会不会是Android8.0的某些权限问题呢？于是在网上搜索，发现了许多和我一样的问题，原来是Android8.0以后移除了“允许位置来源”的开关，需要在每次安装的时候手动授予安装权限，解决方法是在Manifest中添加一句权限:<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.REQUEST_INSTALL_PACKAGES&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;经测试，OK !<br></p><p>&nbsp;&nbsp;后记<br><br>&nbsp;&nbsp;以前也在Android7.0的手机出现过类似的问题，解决android7.0以上版本安装不成功的方法如下 :<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">File file = new File(filePath);</span><br><span class="line">                     Uri uri = Uri.fromFile(file);</span><br><span class="line">                     Intent intent = new Intent(Intent.ACTION_VIEW);</span><br><span class="line">                     intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">                     //判断是否是Android7.0以及更高的版本</span><br><span class="line">                     if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</span><br><span class="line">                         intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</span><br><span class="line">                         FileProvider7.setIntentDataAndType(context, intent, &quot;application/vnd.android.package-archive&quot;, file, true);</span><br><span class="line">                     &#125; else &#123;</span><br><span class="line">                         intent.setDataAndType(uri, &quot;application/vnd.android.package-archive&quot;);</span><br><span class="line">                     &#125;</span><br><span class="line">                     context.startActivity(intent);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 基础 </tag>
            
            <tag> Android8.0适配 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>EventBus使用笔记</title>
      <link href="/2018/06/25/EventBus%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <content type="html"><![CDATA[<h1 id="关于EventBus"><a href="#关于EventBus" class="headerlink" title="关于EventBus"></a>关于EventBus</h1><ul><li>EventBus是一款针对Android优化发布/订阅事件的总线，通俗的来说就是各个activity之间或activity与fragment之间消息的传递，主要功能替换了Intent,Handler,Brodcast在activity，service,线程之间传递消息，优点是在某些复杂情况下的数据传递，并且开销小，代码更优雅，以及将发送者和接收者解耦。</li></ul><a id="more"></a><ul><li>github地址：<ul><li><code>https://github.com/greenrobot/EventBus</code></li></ul></li></ul><h1 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h1><h2 id="一，添加依赖"><a href="#一，添加依赖" class="headerlink" title="一，添加依赖"></a>一，添加依赖</h2><ul><li>在app的build.gradle中添加依赖<ul><li><code>compile &#39;org.greenrobot:eventbus:3.0.0&#39;</code></li></ul></li></ul><h2 id="二，自定义一个类，可以是空类"><a href="#二，自定义一个类，可以是空类" class="headerlink" title="二，自定义一个类，可以是空类"></a>二，自定义一个类，可以是空类</h2><ul><li>例如：发送一个String类型的消息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class EventMsg &#123;</span><br><span class="line"></span><br><span class="line">    private String msg;</span><br><span class="line"></span><br><span class="line">    public EventMsg(String msg) &#123;</span><br><span class="line">        this.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getMsg() &#123;</span><br><span class="line">        return msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="三，在接收消息页面注册与注销"><a href="#三，在接收消息页面注册与注销" class="headerlink" title="三，在接收消息页面注册与注销"></a>三，在接收消息页面注册与注销</h2><ul><li><p>在onCreate方法中注册</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().register(this);</span><br></pre></td></tr></table></figure></li><li><p>在onDestroy方法中注销</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().unregister(this);</span><br></pre></td></tr></table></figure></li></ul><h2 id="四，发送消息"><a href="#四，发送消息" class="headerlink" title="四，发送消息"></a>四，发送消息</h2><ul><li>在发送消息的Activity中发送消息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().post(new EventMsg(&quot;This is a message!&quot;));</span><br></pre></td></tr></table></figure></li></ul><h2 id="五，接收消息"><a href="#五，接收消息" class="headerlink" title="五，接收消息"></a>五，接收消息</h2><ul><li>在接收消息的Activity中创建一个接收消息的方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Subscribe</span><br><span class="line">public void getEventMsg(EventMsg msg)&#123;</span><br><span class="line">    String msg1 = msg.getMsg();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> Android </tag>
            
            <tag> 基础 </tag>
            
            <tag> EventBus </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ButterKnife依赖注入框架配置</title>
      <link href="/2018/06/25/ButterKnife%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E6%A1%86%E6%9E%B6%E9%85%8D%E7%BD%AE/"/>
      <content type="html"><![CDATA[<h1 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h1><ol><li>在项目的build.gradle的dependencies中添加<code>classpath&#39;com.neenbedankt.gradle.plugins:android-apt:1.8&#39;</code></li><li>在app的build.gradle文件中的顶部添加<code>apply plugin:&#39;android-apt&#39;</code>，dependencies中配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;com.jakewharton:butterknife:8.0.1&apos;</span><br><span class="line">apt &apos;com.jakewharton:butterknife-compiler:8.0.1&apos;</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><blockquote><p>说明：由于Android Studio升级到3.0以后，原有配置ButterKnife会报错，以下是新的配置ButterKnife步骤</p></blockquote><ol><li>在app的build.gradle中的dependencies中配置如下依赖即可<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;com.jakewharton:butterknife:8.0.1&apos;</span><br><span class="line">annotationProcessor &apos;com.jakewharton:butterknife-compiler:8.0.1&apos;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> Android </tag>
            
            <tag> 基础 </tag>
            
            <tag> ButterKnife </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ARouter使用笔记</title>
      <link href="/2018/06/25/ARouter%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <content type="html"><![CDATA[<h1 id="ARouter使用笔记"><a href="#ARouter使用笔记" class="headerlink" title="ARouter使用笔记"></a>ARouter使用笔记</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>ARouter是阿里在github上面的一个开源项目，github地址为：<a href="https://github.com/alibaba/ARouter" target="_blank" rel="noopener">https://github.com/alibaba/ARouter</a>。官方给出的解释是<code>Android平台中对页面、服务提供路由功能的中间件，我的目标是 —— 简单且够用。</code></li></ul><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li>ARouter详细使用方式官方已经给出，这里只是摘取部分，供日常开放使用。</li></ul><a id="more"></a><h2 id="使用前配置"><a href="#使用前配置" class="headerlink" title="使用前配置"></a>使用前配置</h2><ul><li><p>在app的build.gradle中配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">...</span><br><span class="line">javaCompileOptions &#123;</span><br><span class="line">    annotationProcessorOptions &#123;</span><br><span class="line">arguments = [ moduleName : project.getName() ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile &apos;com.alibaba:arouter-api:1.2.1.1&apos;</span><br><span class="line">    annotationProcessor &apos;com.alibaba:arouter-compiler:1.1.2.1&apos;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在Application类中初始化SDK</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (isDebug()) &#123; </span><br><span class="line">    ARouter.openLog();</span><br><span class="line">    ARouter.openDebug();</span><br><span class="line">&#125;</span><br><span class="line">ARouter.init(mApplication);</span><br></pre></td></tr></table></figure></li><li><p>在需要跳转的目标Activity中，添加注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 在支持路由的页面上添加注解(必选)</span><br><span class="line">// 这里的路径需要注意的是至少需要有两级，/xx/xx</span><br><span class="line">@Route(path = &quot;/test/activity&quot;)</span><br><span class="line">public class YourActivity extend Activity &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>发起路由跳转操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 1. 应用内简单的跳转(通过URL跳转在&apos;进阶用法&apos;中)</span><br><span class="line">ARouter.getInstance().build(&quot;/test/activity&quot;).navigation();</span><br><span class="line"></span><br><span class="line">// 2. 跳转并携带参数</span><br><span class="line">ARouter.getInstance().build(&quot;/test/1&quot;)</span><br><span class="line">.withLong(&quot;key1&quot;, 666L)</span><br><span class="line">.withString(&quot;key3&quot;, &quot;888&quot;)</span><br><span class="line">.withObject(&quot;key4&quot;, new Test(&quot;Jack&quot;, &quot;Rose&quot;))</span><br><span class="line">.navigation();</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> Android </tag>
            
            <tag> 基础 </tag>
            
            <tag> ARouter </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>范式说明（转载）</title>
      <link href="/2018/06/23/%E8%8C%83%E5%BC%8F%E8%AF%B4%E6%98%8E%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
      <content type="html"><![CDATA[<blockquote><p>原文转载自<a href="https://blog.csdn.net/htq__/article/details/50926836" target="_blank" rel="noopener">https://blog.csdn.net/htq__/article/details/50926836</a></p></blockquote><a id="more"></a><h1 id="第一范式-1NF"><a href="#第一范式-1NF" class="headerlink" title="第一范式(1NF)"></a>第一范式(1NF)</h1><p>&nbsp;&nbsp;无重复的列<br></p><p>&nbsp;&nbsp;所谓第一范式（1NF）是指数据库表的每一列都是不可分割的基本数据项，同一列中不能同时有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。如果出现重复的属性，就可能需要定义一个新的实体，新的实体由重复的属性构成，新实体与原实体之间为一对多关系。在第一范式（1NF）中表的每一行只包含一个实例的信息。简而言之，第一范式就是无重复的列。<br></p><p>&nbsp;&nbsp;在任何一个关系数据库中，第一范式（1NF）是对关系模式的基本要求，不满足第一范式（1NF）的数据库就不是关系数据库。在当前的任何关系数据库管理系统（DBMS）中，不可能做出不符合第一范式的数据库，因为这些DBMS不允许你把数据库表的一列再分成二列或多列。因此，你想在现有的DBMS中设计出不符合第一范式的数据库都是不可能的。<br></p><p>&nbsp;&nbsp;举个栗子：<br></p><p>&nbsp;&nbsp;一张学生表Student(stuNo,stuName,age,age,sex)是不符合第一范式的，因为有重复列age属性。去除重复列age以后的Student(stuNo,stuName,age,sex)是符合第一范式的。<br></p><h1 id="第二范式-3NF"><a href="#第二范式-3NF" class="headerlink" title="第二范式(3NF)"></a>第二范式(3NF)</h1><p>&nbsp;&nbsp;属性完全依赖于主键（消除部分子函数依赖）<br></p><p>&nbsp;&nbsp;第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。第二范式（2NF）要求数据库表中的每个实例或行必须可以被唯一地区分。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。例如员工信息表中加上了员工编号（emp_id）列，因为每个员工的员工编号是唯一的，因此每个员工可以被唯一区分。这个唯一属性列被称为主关键字或主键、主码。<br></p><p>&nbsp;&nbsp;第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。简而言之，第二范式就是属性完全依赖于主键。<br></p><p>&nbsp;&nbsp;这里说的主关键字可能不只有一个，有些情况下是存在联合主键的，就是主键有多个属性。<br></p><p>&nbsp;&nbsp;举个栗子：<br></p><p>&nbsp;&nbsp;以学生选课为例，每个学生都可以选课，并且有这一门课程的成绩，那么如果将这些信息都放在一张表StuGrade(stuNo,stuName,age,sex,courseNo,courseName,credit,score)。<br></p><p><img src="http://p9uaajhtk.bkt.clouddn.com/%E7%AC%AC%E4%B8%89%E8%8C%83%E5%BC%8F%E4%B8%BE%E4%BE%8B.png" alt="第二范式举例"></p><p>&nbsp;&nbsp;如果不仔细看，我们会以为这张表的主键是stuNo，但是当我们看到最后一个score属性以后，在想想如果没有课程信息，那么哪里有学生成绩信息呢。所以这张表的主键是一个联合主键(stuNo,corseNo)，这个联合属性能够唯一确定score属性。那么再看其他信息，比如stuName只需要stuNo就能够唯一确定，courseName只需要courseNo就能够唯一确定，因此这样就存在了部分依赖，不符合第二范式。如果要让学生课程成绩信息满足第二范式，那么久需要将这张表拆分成多张表，一张学生表Studnet(stuNo,stuName,age,sex)，一张课程表Course(courseNo,courseName,credit)，还有最后一张学生课程成绩表StuGrade(stuNo,courseNo,score)。<br></p><p><img src="http://p9uaajhtk.bkt.clouddn.com/%E7%AC%AC%E4%BA%8C%E8%8C%83%E5%BC%8F%E4%B8%BE%E4%BE%8B2.png" alt="第二范式举例2"></p><p>&nbsp;&nbsp;这样就符合第二范式了。<br></p><h1 id="第三范式-3NF"><a href="#第三范式-3NF" class="headerlink" title="第三范式(3NF)"></a>第三范式(3NF)</h1><p>&nbsp;&nbsp;属性不依赖于其它非主属性（消除传递依赖）<br></p><p>&nbsp;&nbsp;满足第三范式（3NF）必须先满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。<br></p><p>&nbsp;&nbsp;举个栗子：<br></p><p>&nbsp;&nbsp;每一个员工都有一个所属部门，假如有一个员工信息表Employee(emp_id,emp_name,emp_age,dept_id,dept_name,dept_info)。<br></p><p><img src="http://p9uaajhtk.bkt.clouddn.com/%E7%AC%AC%E4%BA%8C%E8%8C%83%E5%BC%8F%E4%B8%BE%E4%BE%8B.png" alt="第三范式举例"></p><p>&nbsp;&nbsp;这张员工信息表的主键是emp_id，因为这个属性能够唯一确定其他所有属性，比如知道员工编号emp_id以后，肯定能够知道员工姓名，所属部门编号，部门名称和部门介绍。所以这里dept_id不是主属性，而是非主属性。但是，我们又可以发现dept_name,dept_info这两个属性也可以由dept_id这个非主属性决定，即dept_name依赖dept_id，而dept_id依赖emp_id，这样就存在了传递依赖。而且我们可以看出传递依赖的一个明显缺点就是数据冗余非常严重。<br></p><p>&nbsp;&nbsp;那么如何解决传递依赖问题，其实非常简单，我们只需要将dept_name,dept_info这连个属性删除就可以了，即Employee(emp_id,emp_name,emp_age,dept_id)，然后再创建一个部门表Dept(dept_id,dept_name,dept_info)。<br></p><p><img src="http://p9uaajhtk.bkt.clouddn.com/%E7%AC%AC%E4%B8%89%E8%8C%83%E5%BC%8F%E4%B8%BE%E4%BE%8B2.png" alt="第三范式举例2"></p><p>&nbsp;&nbsp;这样如果要搜索某一个员工的部门信息dept_info，可以通过数据库连接来实现，查询语句如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select e.emp_id,e.emp_name,d.dept_name from Employee e,Dept d where e.dept_id=d.dept_id</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;注意点：</p><ol><li>数据库连接会带来一部分的性能损失</li><li>并不是数据库范式越高越好</li><li>有时会在数据冗余与范式之间做出权衡，在实际的数据库开发过程中，往往会允许一部分的数据冗余来减少数据库连接。</li></ol>]]></content>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 范式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>往事如烟</title>
      <link href="/2018/06/21/%E5%BE%80%E4%BA%8B%E5%A6%82%E7%83%9F/"/>
      <content type="html"><![CDATA[<blockquote><p>缘由:无意间打开了我的loft博客，竟然发现了一篇以前的博客，时间是2011年的高考前后，内容是摘取当时的数篇日记，文章有浓浓的应试作文风格…</p></blockquote><a id="more"></a><p>&nbsp;&nbsp;岁月伴随着迷茫来到了二十岁来到了一个新的驿站，伴随又一个彷徨又相思又迷茫的暑假的结束，仰望星空不仅为时光匆匆而哀叹，过去的事，过去的人，“物是人非事事休，欲与泪先流”。<br></p><ul><li>2011年6月4日 星期六   阴 高考倒计时2天</li></ul><p>&nbsp;&nbsp;时光匆匆，坐在书桌前，看着手中的毕业相片感慨万千，在高考压力之余不禁又想到要毕业了。 三年高中时光，弹指一挥间，匆匆流逝。词人说：“多情自古伤离别”。<br><br>&nbsp;&nbsp;三年中，只是平凡众人中的一个，不是老师家长们眼中的佼佼者。不突出，不平庸，不善表达。下一次写周记的时候，已经是人生的转折点了，那将是面临另一个人生，珍惜现在，沉着应对，把握每分每秒。明天也是在学校的最后一天了，回忆起往昔，有快乐，有痛苦，有成功，有挫折，有风雨，有彩虹，生活像一杯酒，品他，才能体会人生苦辣，是一扇窗，打开他，才能自由的飞翔。“青春不是年华而是心境，青春不是桃面、丹唇、柔膝而是深沉的意志，恢弘的想象，炙热的情感…青春气贯长虹。勇气压倒怯弱，进取压倒苟安”喜欢这句名言，就像每个人年轻过，年轻给人以锐气，给人以蓬勃。当年届花甲之时，也许会在某些时候，或在蒙蒙的细雨中，或在寂静的夜里，暮然回想起，曾在自己的岁月记忆之中，有过这样一段时光，或许有冲动无畏、鲁莽、无知、轻率。生命之光在这一刻涌动，成长岁月中，美好的回忆在这一刻封存，伤感情结交织着人生的挑战，即将走向人生另一条更广阔的路。前方的路会怎样，迷茫又充满希望，遥远又尽在咫尺，只因为“凡是遥远的地方，对我们都有一种诱惑，不是诱惑于美丽就是诱惑于传说”我们都在寻找，哪怕这远方的风景并不尽如人意，哪怕那是一片子虚乌有的桃花源。天下没有不散的宴席，就让这段时光留到回忆的岁月吧！“月下飞仙境湖渡，踏踏波声似白鹭。欲把愁心与明月，谁人解的浔阳处。”我欲乘风归去转朱阁，照无眠，高考似战场，“醉卧沙场君莫笑，古来征战几人回”面对后天的高考，沉着应对，在考场中发挥自己，书写自己！<br></p><ul><li>2011年6月5日  星期天  阴    倒计时1天</li></ul><p>&nbsp;&nbsp;今天是高考前的最后一天，同学们陆陆续续回到教室去搬自己的课桌椅回去，昨天,自己已经将课本都带回家了，来到了教室，人走的走，桌子搬的搬，已不再是像往日的那个坐满人的教室了，不再显得拥挤，地上随处的纸屑，只有墙上的值日表、课程表，墙上依稀可见的字迹是被坐在靠墙壁的同学无聊之时留下的，头上的电风扇此时停止了转动，仿佛为陪伴过我们那个刚刚过去的炎热又压抑的六月而此时此刻得到满意的休息，为下一个六月作好着准备。从学校到家十几分钟的路途，可是从学校回到了家里，课座椅搬回家的那一刻，内心的思绪就整个的变化了，才真实的感觉到了毕业，内心就涌现出一个个念头，我想，昔日的三年级八班不再有我了，那个教室里再也没有属于我的一角了，思绪随着记忆展开…这里曾经是学习的地方，这里曾经让我欢喜，让我忧，而从现在开始，这里的所有属于我的将变得一无所有了，随着时间的流逝，不久后，连自己也会忘得干干净净吧，为了不让岁月的尘土掩盖了美好的回忆，以将他记录封存下来，也许多少年后，或亦将有感于斯文吧！人生路漫漫，美好的中学时光一去不返了，没有谁值得思恋，但就是内心不免些许感伤吧，哪怕只为昔日校园洒过汗水的操场、昔日食堂坐过的椅子，昔日校园走过的小道。物是人非事事休，欲与泪先流，时光太匆匆，过去的日子像风抖落的枫叶，落叶无情而人有情，落叶萧萧，人生如梦。轻轻的我走了，正如我轻轻的来，挥一挥衣袖，不带走一片云彩。此情可待成追忆，只是当时已惘然！路在脚下，背起三年的行囊，去接受人生的洗礼吧，问君能有几多愁，恰似一江春水向东流。晓来谁染霜林醉，总是离人泪，此去今年，前方路途迷茫，雾太浓…<br></p><ul><li>2011年6月11日    星期六   天气 阴</li></ul><p>&nbsp;&nbsp;转眼间，高考已经过去九天了，在这漫长的九天里，每天晚上都睡不着，内心有种说不出的感觉，怅然若失，不知道为什么这么痛苦，晚上就算睡着了也在做梦，做的全部都是上学的梦，有初中，有高中，其中有一个梦场地是初中，而人物却是高中的，毕竟这两个学校自己一共呆过七年吧，翻翻初中写过的日记，从零七年到如今，让自己有对年少时光的幼稚的想法及思想说不出的感觉，是痛恨？是想笑？是回忆？还是感伤？而现在，这九天时间里，可以说是虚度青春，每天晚上睡不着，而白天十一点起来，有时下午还要睡，其他时间就是吃饭了，总之、吃、睡，加上看电视就是我生活的全部，有时夜晚睡不着之时，又不想这么浑浑噩噩的过，而想有所作为，有所计划，但是到了第二天又是老样子了，每天都不出门，呆在家，在家呆着实在无聊就决定出去走走，记得这天下着雨，自己勇敢的出了家门，在县里书店，超市，以及这么多天没来过的学校，徘徊在院墙外，转了一圈回来。走在街上自己提心吊胆的貌似怕见到同学，因为自己也不知道说什么好。正因为这样，自己才会选择雨天出来，因为人少的缘故。回到家，自己又到屋前面的网吧上网，这个离家几十米之遥的网吧，以前因为上学没来过，但高考过后，爸妈就同意我来了，生平第一次来网吧，第一次上网，连开机还是网管鄙视而又不耐烦教的（开玩笑）。回到现在，只是希望高考分数早点出来，六月二十五，既激动又害怕，希望有一个相对理想点的分数吧。每天这样的日子，没有目标，没有计划，惰性占据着全身心，内心一股无名的惆怅和失落，像突然离开学校的失落折磨着内心，自己究竟思恋着什么呢？虽然曾经的上学时光并不快乐，并不时常美好，更多的是苦楚和压力，剪不断、理还乱、是离愁，别是一番滋味在心头！久久难眠，醒来又重复着梦中的思恋苦楚，反反复复，无休无止，衣带渐宽终不悔，为伊消得人憔悴！ <br></p><ul><li>2011年6月30日   星期四       晴</li></ul><p>&nbsp;&nbsp;今天中午，妈妈在超市上班，恰逢里面的水果打折，就称了水果叫我带回去，下午烈日炎炎的太阳，烤的街上的行人纷纷避之而不及，路过二中，看到高一、二的都还在上课，不禁感慨回忆，进而想到我的高中呢？转瞬即逝，许多东西往往是过去后，才知道后悔，流逝后才知道珍惜，以前，唉！只能说没有好好的珍惜，“沉舟侧畔千帆过，病树前头万木春”过去就让过去吧，一届一届的走过，新的高三代替旧的高三，并且总是在不断的重复着，时间总是在流逝的，不会因为个人而停止匆匆的脚步，学校是每个我们的人生中留下过的一个瞬间短促的驿站，留下过最美好回忆的驿站。那么何处是停泊的港湾？时间啊！你为什么流逝的如此之快，子在川上日；不舍昼夜，天若有情天亦老，流星划过的一瞬，历史长河，留给我们的只是那“古今多少事，都付笑谈中”对月当空，洒脱如“对酒当歌，人生几何，思念如“但愿人长久，千里共婵娟”的思念， 惆怅如“无言独上西楼，月如钩”。古往今来，高挂天空的月亮是唯一没有变的，我们所看到的月亮是不是某时某刻古人他们所看到的呢？冥冥之中，是否我们与他们双目对视呢？“江畔何人初见月？江月何年初照人？人生代代无穷已，江月年年只相似。不知江月待何人，但见长江送流水。白云一片去悠悠，春枫浦上不胜愁。”当处在过程之中，只想着结果，当结果来到时，却发现结果并不是那么的迷人，于是倍加怀恋曾经的过程，曾经的岁月！<br></p><ul><li>2011年8月1日    7月31日        阴</li></ul><p>&nbsp;&nbsp;夜未眠，看看以前写过的零碎回忆，当翻开12月29日这篇周记的时候，往事历历在目。那个寒冷的冬天，路灯下的操场上，我仿佛看到了一个在寒风中，围绕着操场一圈又一圈跑过的倔强的的身影。昏黄的路灯照在跑道上的情景，看到了初中部教学楼顶上在那个灯光的映忖下，一阵阵寒风吹过枫树沙沙作响的声音，在那个人的耳际徘徊，至今留在那个人的海里，久久不能忘怀，那个寒冬天未亮，霜未落，只有与影子相伴的操场上，那种过往一排排的枫树的一瞬，那样的时间里光景里，给他留下了最为宝贵的思绪。<br><br>&nbsp;&nbsp;寂寞伴随着他走过那段青春的岁月，他只能惆怅，无能为力，抓不住时间的尾巴，谁道人生无再少，门前流水尚能西。流水无情，而人有情，回忆叠着感伤并着时间的洗涤随风而散，此去今年，往事如烟……</p>]]></content>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 回忆 </tag>
            
            <tag> 高中 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
